
Simple_Calculator_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00003016  000030aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  008000b0  008000b0  000030fa  2**0
                  ALLOC
  3 .stab         0000300c  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001758  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3f       	cpi	r26, 0xF5	; 245
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 16 	call	0x2d10	; 0x2d10 <main>
      8a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ea       	ldi	r26, 0xA7	; 167
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ea       	ldi	r24, 0xA7	; 167
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PWM_Timer0_Start>:
#include "../../common_macros.h"
#include <avr/io.h> /* To use the ADC Registers */
#include "PWM.h"

void PWM_Timer0_Start(uint8 set_duty_cycle)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
     b52:	e2 e5       	ldi	r30, 0x52	; 82
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	10 82       	st	Z, r1
	OCR0  = set_duty_cycle; // Set Compare Value
     b58:	ec e5       	ldi	r30, 0x5C	; 92
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	8a e6       	ldi	r24, 0x6A	; 106
     b66:	80 83       	st	Z, r24

}
     b68:	0f 90       	pop	r0
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <GPIO_setupPinDirection+0x6>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <GPIO_setupPinDirection+0x8>
     b78:	0f 92       	push	r0
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	6a 83       	std	Y+2, r22	; 0x02
     b82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	88 30       	cpi	r24, 0x08	; 8
     b88:	08 f0       	brcs	.+2      	; 0xb8c <GPIO_setupPinDirection+0x1c>
     b8a:	d5 c0       	rjmp	.+426    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	08 f0       	brcs	.+2      	; 0xb94 <GPIO_setupPinDirection+0x24>
     b92:	d1 c0       	rjmp	.+418    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3d 83       	std	Y+5, r19	; 0x05
     b9c:	2c 83       	std	Y+4, r18	; 0x04
     b9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ba0:	9d 81       	ldd	r25, Y+5	; 0x05
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <GPIO_setupPinDirection+0x3a>
     ba8:	43 c0       	rjmp	.+134    	; 0xc30 <GPIO_setupPinDirection+0xc0>
     baa:	2c 81       	ldd	r18, Y+4	; 0x04
     bac:	3d 81       	ldd	r19, Y+5	; 0x05
     bae:	22 30       	cpi	r18, 0x02	; 2
     bb0:	31 05       	cpc	r19, r1
     bb2:	2c f4       	brge	.+10     	; 0xbbe <GPIO_setupPinDirection+0x4e>
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	71 f0       	breq	.+28     	; 0xbd8 <GPIO_setupPinDirection+0x68>
     bbc:	bc c0       	rjmp	.+376    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
     bbe:	2c 81       	ldd	r18, Y+4	; 0x04
     bc0:	3d 81       	ldd	r19, Y+5	; 0x05
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <GPIO_setupPinDirection+0x5a>
     bc8:	5f c0       	rjmp	.+190    	; 0xc88 <GPIO_setupPinDirection+0x118>
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	9d 81       	ldd	r25, Y+5	; 0x05
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <GPIO_setupPinDirection+0x66>
     bd4:	85 c0       	rjmp	.+266    	; 0xce0 <GPIO_setupPinDirection+0x170>
     bd6:	af c0       	rjmp	.+350    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	a1 f4       	brne	.+40     	; 0xc06 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <GPIO_setupPinDirection+0x8c>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <GPIO_setupPinDirection+0x88>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	98 c0       	rjmp	.+304    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <GPIO_setupPinDirection+0xb4>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <GPIO_setupPinDirection+0xb0>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	83 c0       	rjmp	.+262    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	a1 f4       	brne	.+40     	; 0xc5e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0xe4>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0xe0>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	6c c0       	rjmp	.+216    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_setupPinDirection+0x10c>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_setupPinDirection+0x108>
     c80:	80 95       	com	r24
     c82:	84 23       	and	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	57 c0       	rjmp	.+174    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	a1 f4       	brne	.+40     	; 0xcb6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c8e:	a4 e3       	ldi	r26, 0x34	; 52
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e4 e3       	ldi	r30, 0x34	; 52
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_setupPinDirection+0x13c>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_setupPinDirection+0x138>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	40 c0       	rjmp	.+128    	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cb6:	a4 e3       	ldi	r26, 0x34	; 52
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e4 e3       	ldi	r30, 0x34	; 52
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setupPinDirection+0x164>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setupPinDirection+0x160>
     cd8:	80 95       	com	r24
     cda:	84 23       	and	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	2b c0       	rjmp	.+86     	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	a1 f4       	brne	.+40     	; 0xd0e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <GPIO_setupPinDirection+0x194>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <GPIO_setupPinDirection+0x190>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x1bc>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x1b8>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <GPIO_writePin+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <GPIO_writePin+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	6a 83       	std	Y+2, r22	; 0x02
     d58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	88 30       	cpi	r24, 0x08	; 8
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <GPIO_writePin+0x1c>
     d60:	d5 c0       	rjmp	.+426    	; 0xf0c <GPIO_writePin+0x1c6>
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	08 f0       	brcs	.+2      	; 0xd6a <GPIO_writePin+0x24>
     d68:	d1 c0       	rjmp	.+418    	; 0xf0c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <GPIO_writePin+0x3a>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <GPIO_writePin+0xc0>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <GPIO_writePin+0x4e>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	71 f0       	breq	.+28     	; 0xdae <GPIO_writePin+0x68>
     d92:	bc c0       	rjmp	.+376    	; 0xf0c <GPIO_writePin+0x1c6>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <GPIO_writePin+0x5a>
     d9e:	5f c0       	rjmp	.+190    	; 0xe5e <GPIO_writePin+0x118>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <GPIO_writePin+0x66>
     daa:	85 c0       	rjmp	.+266    	; 0xeb6 <GPIO_writePin+0x170>
     dac:	af c0       	rjmp	.+350    	; 0xf0c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	a1 f4       	brne	.+40     	; 0xddc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_writePin+0x8c>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_writePin+0x88>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	98 c0       	rjmp	.+304    	; 0xf0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ddc:	ab e3       	ldi	r26, 0x3B	; 59
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e3       	ldi	r30, 0x3B	; 59
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <GPIO_writePin+0xb4>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <GPIO_writePin+0xb0>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	83 c0       	rjmp	.+262    	; 0xf0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	a1 f4       	brne	.+40     	; 0xe34 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_writePin+0xe4>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_writePin+0xe0>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	6c c0       	rjmp	.+216    	; 0xf0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_writePin+0x10c>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_writePin+0x108>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	57 c0       	rjmp	.+174    	; 0xf0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_writePin+0x13c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_writePin+0x138>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <GPIO_writePin+0x164>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <GPIO_writePin+0x160>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_writePin+0x194>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_writePin+0x190>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_writePin+0x1bc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_writePin+0x1b8>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <GPIO_readPin+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <GPIO_readPin+0x8>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f2e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	08 f0       	brcs	.+2      	; 0xf38 <GPIO_readPin+0x1c>
     f36:	84 c0       	rjmp	.+264    	; 0x1040 <GPIO_readPin+0x124>
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <GPIO_readPin+0x24>
     f3e:	80 c0       	rjmp	.+256    	; 0x1040 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	4c 81       	ldd	r20, Y+4	; 0x04
     f4c:	5d 81       	ldd	r21, Y+5	; 0x05
     f4e:	41 30       	cpi	r20, 0x01	; 1
     f50:	51 05       	cpc	r21, r1
     f52:	79 f1       	breq	.+94     	; 0xfb2 <GPIO_readPin+0x96>
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	91 05       	cpc	r25, r1
     f5c:	34 f4       	brge	.+12     	; 0xf6a <GPIO_readPin+0x4e>
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	69 f0       	breq	.+26     	; 0xf82 <GPIO_readPin+0x66>
     f68:	6b c0       	rjmp	.+214    	; 0x1040 <GPIO_readPin+0x124>
     f6a:	4c 81       	ldd	r20, Y+4	; 0x04
     f6c:	5d 81       	ldd	r21, Y+5	; 0x05
     f6e:	42 30       	cpi	r20, 0x02	; 2
     f70:	51 05       	cpc	r21, r1
     f72:	b9 f1       	breq	.+110    	; 0xfe2 <GPIO_readPin+0xc6>
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	83 30       	cpi	r24, 0x03	; 3
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <GPIO_readPin+0x64>
     f7e:	49 c0       	rjmp	.+146    	; 0x1012 <GPIO_readPin+0xf6>
     f80:	5f c0       	rjmp	.+190    	; 0x1040 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f82:	e9 e3       	ldi	r30, 0x39	; 57
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_readPin+0x7e>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_readPin+0x7a>
     f9e:	ca 01       	movw	r24, r20
     fa0:	81 70       	andi	r24, 0x01	; 1
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	88 23       	and	r24, r24
     fa6:	19 f0       	breq	.+6      	; 0xfae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	49 c0       	rjmp	.+146    	; 0x1040 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fae:	19 82       	std	Y+1, r1	; 0x01
     fb0:	47 c0       	rjmp	.+142    	; 0x1040 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     fb2:	e6 e3       	ldi	r30, 0x36	; 54
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_readPin+0xae>
     fc6:	55 95       	asr	r21
     fc8:	47 95       	ror	r20
     fca:	8a 95       	dec	r24
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_readPin+0xaa>
     fce:	ca 01       	movw	r24, r20
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	88 23       	and	r24, r24
     fd6:	19 f0       	breq	.+6      	; 0xfde <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	31 c0       	rjmp	.+98     	; 0x1040 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	2f c0       	rjmp	.+94     	; 0x1040 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_readPin+0xde>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_readPin+0xda>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	88 23       	and	r24, r24
    1006:	19 f0       	breq	.+6      	; 0x100e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	19 c0       	rjmp	.+50     	; 0x1040 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1012:	e0 e3       	ldi	r30, 0x30	; 48
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_readPin+0x10e>
    1026:	55 95       	asr	r21
    1028:	47 95       	ror	r20
    102a:	8a 95       	dec	r24
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_readPin+0x10a>
    102e:	ca 01       	movw	r24, r20
    1030:	81 70       	andi	r24, 0x01	; 1
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	88 23       	and	r24, r24
    1036:	19 f0       	breq	.+6      	; 0x103e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    103e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <GPIO_setupPortDirection+0x6>
    1058:	00 d0       	rcall	.+0      	; 0x105a <GPIO_setupPortDirection+0x8>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	90 f5       	brcc	.+100    	; 0x10cc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3c 83       	std	Y+4, r19	; 0x04
    1070:	2b 83       	std	Y+3, r18	; 0x03
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	d1 f0       	breq	.+52     	; 0x10b0 <GPIO_setupPortDirection+0x5e>
    107c:	2b 81       	ldd	r18, Y+3	; 0x03
    107e:	3c 81       	ldd	r19, Y+4	; 0x04
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <GPIO_setupPortDirection+0x3e>
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	61 f0       	breq	.+24     	; 0x10a6 <GPIO_setupPortDirection+0x54>
    108e:	1e c0       	rjmp	.+60     	; 0x10cc <GPIO_setupPortDirection+0x7a>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <GPIO_setupPortDirection+0x68>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	81 f0       	breq	.+32     	; 0x10c4 <GPIO_setupPortDirection+0x72>
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10a6:	ea e3       	ldi	r30, 0x3A	; 58
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10ba:	e4 e3       	ldi	r30, 0x34	; 52
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_writePort+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <GPIO_writePort+0x8>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	90 f5       	brcc	.+100    	; 0x1154 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	d1 f0       	breq	.+52     	; 0x1138 <GPIO_writePort+0x5e>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <GPIO_writePort+0x3e>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	61 f0       	breq	.+24     	; 0x112e <GPIO_writePort+0x54>
    1116:	1e c0       	rjmp	.+60     	; 0x1154 <GPIO_writePort+0x7a>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <GPIO_writePort+0x68>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <GPIO_writePort+0x72>
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    112e:	eb e3       	ldi	r30, 0x3B	; 59
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
			break;
		}
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <GPIO_readPort+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <GPIO_readPort+0x8>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1170:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	90 f5       	brcc	.+100    	; 0x11dc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3c 83       	std	Y+4, r19	; 0x04
    1180:	2b 83       	std	Y+3, r18	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	d1 f0       	breq	.+52     	; 0x11c0 <GPIO_readPort+0x5e>
    118c:	2b 81       	ldd	r18, Y+3	; 0x03
    118e:	3c 81       	ldd	r19, Y+4	; 0x04
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	2c f4       	brge	.+10     	; 0x11a0 <GPIO_readPort+0x3e>
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	61 f0       	breq	.+24     	; 0x11b6 <GPIO_readPort+0x54>
    119e:	1e c0       	rjmp	.+60     	; 0x11dc <GPIO_readPort+0x7a>
    11a0:	2b 81       	ldd	r18, Y+3	; 0x03
    11a2:	3c 81       	ldd	r19, Y+4	; 0x04
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	81 f0       	breq	.+32     	; 0x11ca <GPIO_readPort+0x68>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	81 f0       	breq	.+32     	; 0x11d4 <GPIO_readPort+0x72>
    11b4:	13 c0       	rjmp	.+38     	; 0x11dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    11b6:	e9 e3       	ldi	r30, 0x39	; 57
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	0e c0       	rjmp	.+28     	; 0x11dc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    11c0:	e6 e3       	ldi	r30, 0x36	; 54
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11ca:	e3 e3       	ldi	r30, 0x33	; 51
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11d4:	e0 e3       	ldi	r30, 0x30	; 48
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void ADC_init(const ADC_ConfigType *Config_Ptr)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <ADC_init+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <ADC_init+0x8>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <ADC_init+0xa>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
	 3* REFS1:0 =
	              * external VREF       - 00 (0x00)
	              * AVCC 5V             - 01 (0x01)
	              * internal VREF 2.56V - 11 (0x03)
	 */
	switch(Config_Ptr->ADC_ReferenceVolatge)
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	81 81       	ldd	r24, Z+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3e 83       	std	Y+6, r19	; 0x06
    120a:	2d 83       	std	Y+5, r18	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	31 f0       	breq	.+12     	; 0x1222 <ADC_init+0x36>
    1216:	2d 81       	ldd	r18, Y+5	; 0x05
    1218:	3e 81       	ldd	r19, Y+6	; 0x06
    121a:	25 30       	cpi	r18, 0x05	; 5
    121c:	31 05       	cpc	r19, r1
    121e:	41 f0       	breq	.+16     	; 0x1230 <ADC_init+0x44>
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <ADC_init+0x54>
	{
	case EXTERNAL_AREF:
	ADMUX |= (0x00<<REFS0);
    1222:	e7 e2       	ldi	r30, 0x27	; 39
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	a7 e2       	ldi	r26, 0x27	; 39
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	8c 91       	ld	r24, X
    122c:	80 83       	st	Z, r24
    122e:	0f c0       	rjmp	.+30     	; 0x124e <ADC_init+0x62>
	break;
	case AVCC:
	ADMUX |= (0x01<<REFS0);
    1230:	a7 e2       	ldi	r26, 0x27	; 39
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e2       	ldi	r30, 0x27	; 39
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 64       	ori	r24, 0x40	; 64
    123c:	8c 93       	st	X, r24
    123e:	07 c0       	rjmp	.+14     	; 0x124e <ADC_init+0x62>
	break;
	default:
	ADMUX |= (0x03<<REFS0);
    1240:	a7 e2       	ldi	r26, 0x27	; 39
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e7 e2       	ldi	r30, 0x27	; 39
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 6c       	ori	r24, 0xC0	; 192
    124c:	8c 93       	st	X, r24
                 * division factor 32 - 101(decimal 5)
                 * division factor 64 - 110 (decimal 6)
                 * division factor 128 - 111 (decimal 7)
        Note: AVR MC operates on frequency between 50-200 kHz */

	SET_BIT(ADCSRA,ADEN);
    124e:	a6 e2       	ldi	r26, 0x26	; 38
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e6 e2       	ldi	r30, 0x26	; 38
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
	switch(Config_Ptr->prescaler)
    125c:	e9 81       	ldd	r30, Y+1	; 0x01
    125e:	fa 81       	ldd	r31, Y+2	; 0x02
    1260:	80 81       	ld	r24, Z
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	2b 83       	std	Y+3, r18	; 0x03
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <ADC_init+0x8a>
    1274:	45 c0       	rjmp	.+138    	; 0x1300 <ADC_init+0x114>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	24 30       	cpi	r18, 0x04	; 4
    127c:	31 05       	cpc	r19, r1
    127e:	7c f4       	brge	.+30     	; 0x129e <ADC_init+0xb2>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	49 f1       	breq	.+82     	; 0x12dc <ADC_init+0xf0>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	6c f5       	brge	.+90     	; 0x12ee <ADC_init+0x102>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	c1 f0       	breq	.+48     	; 0x12cc <ADC_init+0xe0>
    129c:	5c c0       	rjmp	.+184    	; 0x1356 <ADC_init+0x16a>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	25 30       	cpi	r18, 0x05	; 5
    12a4:	31 05       	cpc	r19, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <ADC_init+0xbe>
    12a8:	3d c0       	rjmp	.+122    	; 0x1324 <ADC_init+0x138>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	85 30       	cpi	r24, 0x05	; 5
    12b0:	91 05       	cpc	r25, r1
    12b2:	7c f1       	brlt	.+94     	; 0x1312 <ADC_init+0x126>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	26 30       	cpi	r18, 0x06	; 6
    12ba:	31 05       	cpc	r19, r1
    12bc:	e1 f1       	breq	.+120    	; 0x1336 <ADC_init+0x14a>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	87 30       	cpi	r24, 0x07	; 7
    12c4:	91 05       	cpc	r25, r1
    12c6:	09 f4       	brne	.+2      	; 0x12ca <ADC_init+0xde>
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <ADC_init+0x15c>
    12ca:	45 c0       	rjmp	.+138    	; 0x1356 <ADC_init+0x16a>
	{
	 case ADC_NO_PRESCALER :
		ADCSRA= (ADCSRA& 0xF8) | ADC_NO_PRESCALER;
    12cc:	a6 e2       	ldi	r26, 0x26	; 38
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e6 e2       	ldi	r30, 0x26	; 38
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	88 7f       	andi	r24, 0xF8	; 248
    12d8:	8c 93       	st	X, r24
    12da:	3d c0       	rjmp	.+122    	; 0x1356 <ADC_init+0x16a>
		break;
	 case ADC_PRESCALER_2:
		ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_2;
    12dc:	a6 e2       	ldi	r26, 0x26	; 38
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e6 e2       	ldi	r30, 0x26	; 38
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 7f       	andi	r24, 0xF8	; 248
    12e8:	81 60       	ori	r24, 0x01	; 1
    12ea:	8c 93       	st	X, r24
    12ec:	34 c0       	rjmp	.+104    	; 0x1356 <ADC_init+0x16a>
		break;
	 case ADC_PRESCALER_4:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_4;
    12ee:	a6 e2       	ldi	r26, 0x26	; 38
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e6 e2       	ldi	r30, 0x26	; 38
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	88 7f       	andi	r24, 0xF8	; 248
    12fa:	82 60       	ori	r24, 0x02	; 2
    12fc:	8c 93       	st	X, r24
    12fe:	2b c0       	rjmp	.+86     	; 0x1356 <ADC_init+0x16a>
			break;
	 case ADC_PRESCALER_8:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_8;
    1300:	a6 e2       	ldi	r26, 0x26	; 38
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e2       	ldi	r30, 0x26	; 38
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 7f       	andi	r24, 0xF8	; 248
    130c:	83 60       	ori	r24, 0x03	; 3
    130e:	8c 93       	st	X, r24
    1310:	22 c0       	rjmp	.+68     	; 0x1356 <ADC_init+0x16a>
			break;
	 case ADC_PRESCALER_16:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_16;
    1312:	a6 e2       	ldi	r26, 0x26	; 38
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e6 e2       	ldi	r30, 0x26	; 38
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	88 7f       	andi	r24, 0xF8	; 248
    131e:	84 60       	ori	r24, 0x04	; 4
    1320:	8c 93       	st	X, r24
    1322:	19 c0       	rjmp	.+50     	; 0x1356 <ADC_init+0x16a>
			break;
	 case ADC_PRESCALER_32:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_32;
    1324:	a6 e2       	ldi	r26, 0x26	; 38
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e6 e2       	ldi	r30, 0x26	; 38
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	85 60       	ori	r24, 0x05	; 5
    1332:	8c 93       	st	X, r24
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <ADC_init+0x16a>
			break;
	 case ADC_PRESCALER_64:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_64;
    1336:	a6 e2       	ldi	r26, 0x26	; 38
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e6 e2       	ldi	r30, 0x26	; 38
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	88 7f       	andi	r24, 0xF8	; 248
    1342:	86 60       	ori	r24, 0x06	; 6
    1344:	8c 93       	st	X, r24
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <ADC_init+0x16a>
			break;
	 case ADC_PRESCALER_128:
			ADCSRA= (ADCSRA& 0xF8) | ADC_PRESCALER_128;
    1348:	a6 e2       	ldi	r26, 0x26	; 38
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e6 e2       	ldi	r30, 0x26	; 38
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	87 60       	ori	r24, 0x07	; 7
    1354:	8c 93       	st	X, r24
			break;
	}
}
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	87 70       	andi	r24, 0x07	; 7
    1378:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    137a:	a7 e2       	ldi	r26, 0x27	; 39
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e7 e2       	ldi	r30, 0x27	; 39
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	80 7e       	andi	r24, 0xE0	; 224
    1386:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1388:	a7 e2       	ldi	r26, 0x27	; 39
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e7 e2       	ldi	r30, 0x27	; 39
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	90 81       	ld	r25, Z
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	89 2b       	or	r24, r25
    1396:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1398:	a6 e2       	ldi	r26, 0x26	; 38
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e6 e2       	ldi	r30, 0x26	; 38
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    13a6:	e6 e2       	ldi	r30, 0x26	; 38
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	80 71       	andi	r24, 0x10	; 16
    13b2:	90 70       	andi	r25, 0x00	; 0
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	b9 f3       	breq	.-18     	; 0x13a6 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    13b8:	a6 e2       	ldi	r26, 0x26	; 38
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e6 e2       	ldi	r30, 0x26	; 38
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 61       	ori	r24, 0x10	; 16
    13c4:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    13c6:	e4 e2       	ldi	r30, 0x24	; 36
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
}
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	2e 97       	sbiw	r28, 0x0e	; 14
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 ea       	ldi	r26, 0xA0	; 160
    1404:	b1 e4       	ldi	r27, 0x41	; 65
    1406:	8b 87       	std	Y+11, r24	; 0x0b
    1408:	9c 87       	std	Y+12, r25	; 0x0c
    140a:	ad 87       	std	Y+13, r26	; 0x0d
    140c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1410:	7c 85       	ldd	r23, Y+12	; 0x0c
    1412:	8d 85       	ldd	r24, Y+13	; 0x0d
    1414:	9e 85       	ldd	r25, Y+14	; 0x0e
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	4a e7       	ldi	r20, 0x7A	; 122
    141c:	53 e4       	ldi	r21, 0x43	; 67
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8f 83       	std	Y+7, r24	; 0x07
    1428:	98 87       	std	Y+8, r25	; 0x08
    142a:	a9 87       	std	Y+9, r26	; 0x09
    142c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	5f e3       	ldi	r21, 0x3F	; 63
    143e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1442:	88 23       	and	r24, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <LCD_init+0x7a>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <LCD_init+0xf8>
	else if (__tmp > 65535)
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	4c f5       	brge	.+82     	; 0x14ba <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	6b 85       	ldd	r22, Y+11	; 0x0b
    146a:	7c 85       	ldd	r23, Y+12	; 0x0c
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <LCD_init+0xda>
    1492:	89 e1       	ldi	r24, 0x19	; 25
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LCD_init+0xc8>
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	69 f7       	brne	.-38     	; 0x1492 <LCD_init+0xbc>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <LCD_init+0x104>
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 29 08 	call	0x1052	; 0x1052 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    14ea:	88 e3       	ldi	r24, 0x38	; 56
    14ec:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14f0:	8c e0       	ldi	r24, 0x0C	; 12
    14f2:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_sendCommand>
}
    14fc:	2e 96       	adiw	r28, 0x0e	; 14
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	e9 97       	sbiw	r28, 0x39	; 57
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e8       	ldi	r26, 0x80	; 128
    1534:	bf e3       	ldi	r27, 0x3F	; 63
    1536:	8d ab       	std	Y+53, r24	; 0x35
    1538:	9e ab       	std	Y+54, r25	; 0x36
    153a:	af ab       	std	Y+55, r26	; 0x37
    153c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	6d a9       	ldd	r22, Y+53	; 0x35
    1540:	7e a9       	ldd	r23, Y+54	; 0x36
    1542:	8f a9       	ldd	r24, Y+55	; 0x37
    1544:	98 ad       	ldd	r25, Y+56	; 0x38
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a e7       	ldi	r20, 0x7A	; 122
    154c:	53 e4       	ldi	r21, 0x43	; 67
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	89 ab       	std	Y+49, r24	; 0x31
    1558:	9a ab       	std	Y+50, r25	; 0x32
    155a:	ab ab       	std	Y+51, r26	; 0x33
    155c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    155e:	69 a9       	ldd	r22, Y+49	; 0x31
    1560:	7a a9       	ldd	r23, Y+50	; 0x32
    1562:	8b a9       	ldd	r24, Y+51	; 0x33
    1564:	9c a9       	ldd	r25, Y+52	; 0x34
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <LCD_sendCommand+0x72>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	98 ab       	std	Y+48, r25	; 0x30
    157c:	8f a7       	std	Y+47, r24	; 0x2f
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1580:	69 a9       	ldd	r22, Y+49	; 0x31
    1582:	7a a9       	ldd	r23, Y+50	; 0x32
    1584:	8b a9       	ldd	r24, Y+51	; 0x33
    1586:	9c a9       	ldd	r25, Y+52	; 0x34
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1594:	18 16       	cp	r1, r24
    1596:	4c f5       	brge	.+82     	; 0x15ea <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	6d a9       	ldd	r22, Y+53	; 0x35
    159a:	7e a9       	ldd	r23, Y+54	; 0x36
    159c:	8f a9       	ldd	r24, Y+55	; 0x37
    159e:	98 ad       	ldd	r25, Y+56	; 0x38
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	98 ab       	std	Y+48, r25	; 0x30
    15be:	8f a7       	std	Y+47, r24	; 0x2f
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <LCD_sendCommand+0xd2>
    15c2:	89 e1       	ldi	r24, 0x19	; 25
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e a7       	std	Y+46, r25	; 0x2e
    15c8:	8d a7       	std	Y+45, r24	; 0x2d
    15ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    15cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <LCD_sendCommand+0xc0>
    15d2:	9e a7       	std	Y+46, r25	; 0x2e
    15d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d8:	98 a9       	ldd	r25, Y+48	; 0x30
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	98 ab       	std	Y+48, r25	; 0x30
    15de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e2:	98 a9       	ldd	r25, Y+48	; 0x30
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <LCD_sendCommand+0xb4>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	98 ab       	std	Y+48, r25	; 0x30
    15fc:	8f a7       	std	Y+47, r24	; 0x2f
    15fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1600:	98 a9       	ldd	r25, Y+48	; 0x30
    1602:	9c a7       	std	Y+44, r25	; 0x2c
    1604:	8b a7       	std	Y+43, r24	; 0x2b
    1606:	8b a5       	ldd	r24, Y+43	; 0x2b
    1608:	9c a5       	ldd	r25, Y+44	; 0x2c
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0xfc>
    160e:	9c a7       	std	Y+44, r25	; 0x2c
    1610:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e8       	ldi	r26, 0x80	; 128
    1622:	bf e3       	ldi	r27, 0x3F	; 63
    1624:	8f a3       	std	Y+39, r24	; 0x27
    1626:	98 a7       	std	Y+40, r25	; 0x28
    1628:	a9 a7       	std	Y+41, r26	; 0x29
    162a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	6f a1       	ldd	r22, Y+39	; 0x27
    162e:	78 a5       	ldd	r23, Y+40	; 0x28
    1630:	89 a5       	ldd	r24, Y+41	; 0x29
    1632:	9a a5       	ldd	r25, Y+42	; 0x2a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a e7       	ldi	r20, 0x7A	; 122
    163a:	53 e4       	ldi	r21, 0x43	; 67
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8b a3       	std	Y+35, r24	; 0x23
    1646:	9c a3       	std	Y+36, r25	; 0x24
    1648:	ad a3       	std	Y+37, r26	; 0x25
    164a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    164c:	6b a1       	ldd	r22, Y+35	; 0x23
    164e:	7c a1       	ldd	r23, Y+36	; 0x24
    1650:	8d a1       	ldd	r24, Y+37	; 0x25
    1652:	9e a1       	ldd	r25, Y+38	; 0x26
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <LCD_sendCommand+0x160>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	6f a1       	ldd	r22, Y+39	; 0x27
    1688:	78 a5       	ldd	r23, Y+40	; 0x28
    168a:	89 a5       	ldd	r24, Y+41	; 0x29
    168c:	9a a5       	ldd	r25, Y+42	; 0x2a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9a a3       	std	Y+34, r25	; 0x22
    16ac:	89 a3       	std	Y+33, r24	; 0x21
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <LCD_sendCommand+0x1c0>
    16b0:	89 e1       	ldi	r24, 0x19	; 25
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	98 a3       	std	Y+32, r25	; 0x20
    16b6:	8f 8f       	std	Y+31, r24	; 0x1f
    16b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ba:	98 a1       	ldd	r25, Y+32	; 0x20
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_sendCommand+0x1ae>
    16c0:	98 a3       	std	Y+32, r25	; 0x20
    16c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	89 a1       	ldd	r24, Y+33	; 0x21
    16c6:	9a a1       	ldd	r25, Y+34	; 0x22
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9a a3       	std	Y+34, r25	; 0x22
    16cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	89 a1       	ldd	r24, Y+33	; 0x21
    16d0:	9a a1       	ldd	r25, Y+34	; 0x22
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <LCD_sendCommand+0x1a2>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6b a1       	ldd	r22, Y+35	; 0x23
    16da:	7c a1       	ldd	r23, Y+36	; 0x24
    16dc:	8d a1       	ldd	r24, Y+37	; 0x25
    16de:	9e a1       	ldd	r25, Y+38	; 0x26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
    16ec:	89 a1       	ldd	r24, Y+33	; 0x21
    16ee:	9a a1       	ldd	r25, Y+34	; 0x22
    16f0:	9e 8f       	std	Y+30, r25	; 0x1e
    16f2:	8d 8f       	std	Y+29, r24	; 0x1d
    16f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_sendCommand+0x1ea>
    16fc:	9e 8f       	std	Y+30, r25	; 0x1e
    16fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	69 ad       	ldd	r22, Y+57	; 0x39
    1704:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_writePort>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e8       	ldi	r26, 0x80	; 128
    170e:	bf e3       	ldi	r27, 0x3F	; 63
    1710:	89 8f       	std	Y+25, r24	; 0x19
    1712:	9a 8f       	std	Y+26, r25	; 0x1a
    1714:	ab 8f       	std	Y+27, r26	; 0x1b
    1716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	69 8d       	ldd	r22, Y+25	; 0x19
    171a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    171c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8d 8b       	std	Y+21, r24	; 0x15
    1732:	9e 8b       	std	Y+22, r25	; 0x16
    1734:	af 8b       	std	Y+23, r26	; 0x17
    1736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1738:	6d 89       	ldd	r22, Y+21	; 0x15
    173a:	7e 89       	ldd	r23, Y+22	; 0x16
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	98 8d       	ldd	r25, Y+24	; 0x18
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 8b       	std	Y+20, r25	; 0x14
    1756:	8b 8b       	std	Y+19, r24	; 0x13
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    175a:	6d 89       	ldd	r22, Y+21	; 0x15
    175c:	7e 89       	ldd	r23, Y+22	; 0x16
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	69 8d       	ldd	r22, Y+25	; 0x19
    1774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_sendCommand+0x2ac>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	9a 89       	ldd	r25, Y+18	; 0x12
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_sendCommand+0x29a>
    17ac:	9a 8b       	std	Y+18, r25	; 0x12
    17ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9c 8b       	std	Y+20, r25	; 0x14
    17b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8b 89       	ldd	r24, Y+19	; 0x13
    17bc:	9c 89       	ldd	r25, Y+20	; 0x14
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_sendCommand+0x28e>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	98 89       	ldd	r25, Y+16	; 0x10
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_sendCommand+0x2d6>
    17e8:	98 8b       	std	Y+16, r25	; 0x10
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e8       	ldi	r26, 0x80	; 128
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	8b 87       	std	Y+11, r24	; 0x0b
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	ad 87       	std	Y+13, r26	; 0x0d
    1804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	a9 87       	std	Y+9, r26	; 0x09
    1824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <LCD_sendCommand+0x33a>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <LCD_sendCommand+0x39a>
    188a:	89 e1       	ldi	r24, 0x19	; 25
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_sendCommand+0x388>
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <LCD_sendCommand+0x37c>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_sendCommand+0x3c4>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18da:	e9 96       	adiw	r28, 0x39	; 57
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	e9 97       	sbiw	r28, 0x39	; 57
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e8       	ldi	r26, 0x80	; 128
    1912:	bf e3       	ldi	r27, 0x3F	; 63
    1914:	8d ab       	std	Y+53, r24	; 0x35
    1916:	9e ab       	std	Y+54, r25	; 0x36
    1918:	af ab       	std	Y+55, r26	; 0x37
    191a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6d a9       	ldd	r22, Y+53	; 0x35
    191e:	7e a9       	ldd	r23, Y+54	; 0x36
    1920:	8f a9       	ldd	r24, Y+55	; 0x37
    1922:	98 ad       	ldd	r25, Y+56	; 0x38
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a e7       	ldi	r20, 0x7A	; 122
    192a:	53 e4       	ldi	r21, 0x43	; 67
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	89 ab       	std	Y+49, r24	; 0x31
    1936:	9a ab       	std	Y+50, r25	; 0x32
    1938:	ab ab       	std	Y+51, r26	; 0x33
    193a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    193c:	69 a9       	ldd	r22, Y+49	; 0x31
    193e:	7a a9       	ldd	r23, Y+50	; 0x32
    1940:	8b a9       	ldd	r24, Y+51	; 0x33
    1942:	9c a9       	ldd	r25, Y+52	; 0x34
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	98 ab       	std	Y+48, r25	; 0x30
    195a:	8f a7       	std	Y+47, r24	; 0x2f
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6d a9       	ldd	r22, Y+53	; 0x35
    1978:	7e a9       	ldd	r23, Y+54	; 0x36
    197a:	8f a9       	ldd	r24, Y+55	; 0x37
    197c:	98 ad       	ldd	r25, Y+56	; 0x38
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	98 ab       	std	Y+48, r25	; 0x30
    199c:	8f a7       	std	Y+47, r24	; 0x2f
    199e:	0f c0       	rjmp	.+30     	; 0x19be <LCD_displayCharacter+0xd2>
    19a0:	89 e1       	ldi	r24, 0x19	; 25
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e a7       	std	Y+46, r25	; 0x2e
    19a6:	8d a7       	std	Y+45, r24	; 0x2d
    19a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_displayCharacter+0xc0>
    19b0:	9e a7       	std	Y+46, r25	; 0x2e
    19b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b6:	98 a9       	ldd	r25, Y+48	; 0x30
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c0:	98 a9       	ldd	r25, Y+48	; 0x30
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <LCD_displayCharacter+0xb4>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ca:	7a a9       	ldd	r23, Y+50	; 0x32
    19cc:	8b a9       	ldd	r24, Y+51	; 0x33
    19ce:	9c a9       	ldd	r25, Y+52	; 0x34
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	98 ab       	std	Y+48, r25	; 0x30
    19da:	8f a7       	std	Y+47, r24	; 0x2f
    19dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19de:	98 a9       	ldd	r25, Y+48	; 0x30
    19e0:	9c a7       	std	Y+44, r25	; 0x2c
    19e2:	8b a7       	std	Y+43, r24	; 0x2b
    19e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <LCD_displayCharacter+0xfc>
    19ec:	9c a7       	std	Y+44, r25	; 0x2c
    19ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e8       	ldi	r26, 0x80	; 128
    1a00:	bf e3       	ldi	r27, 0x3F	; 63
    1a02:	8f a3       	std	Y+39, r24	; 0x27
    1a04:	98 a7       	std	Y+40, r25	; 0x28
    1a06:	a9 a7       	std	Y+41, r26	; 0x29
    1a08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8b a3       	std	Y+35, r24	; 0x23
    1a24:	9c a3       	std	Y+36, r25	; 0x24
    1a26:	ad a3       	std	Y+37, r26	; 0x25
    1a28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a30:	9e a1       	ldd	r25, Y+38	; 0x26
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a a3       	std	Y+34, r25	; 0x22
    1a48:	89 a3       	std	Y+33, r24	; 0x21
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a50:	8d a1       	ldd	r24, Y+37	; 0x25
    1a52:	9e a1       	ldd	r25, Y+38	; 0x26
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6f a1       	ldd	r22, Y+39	; 0x27
    1a66:	78 a5       	ldd	r23, Y+40	; 0x28
    1a68:	89 a5       	ldd	r24, Y+41	; 0x29
    1a6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9a a3       	std	Y+34, r25	; 0x22
    1a8a:	89 a3       	std	Y+33, r24	; 0x21
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <LCD_displayCharacter+0x1c0>
    1a8e:	89 e1       	ldi	r24, 0x19	; 25
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	98 a3       	std	Y+32, r25	; 0x20
    1a94:	8f 8f       	std	Y+31, r24	; 0x1f
    1a96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a98:	98 a1       	ldd	r25, Y+32	; 0x20
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_displayCharacter+0x1ae>
    1a9e:	98 a3       	std	Y+32, r25	; 0x20
    1aa0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9a a3       	std	Y+34, r25	; 0x22
    1aaa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	89 a1       	ldd	r24, Y+33	; 0x21
    1aae:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <LCD_displayCharacter+0x1a2>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aba:	8d a1       	ldd	r24, Y+37	; 0x25
    1abc:	9e a1       	ldd	r25, Y+38	; 0x26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9a a3       	std	Y+34, r25	; 0x22
    1ac8:	89 a3       	std	Y+33, r24	; 0x21
    1aca:	89 a1       	ldd	r24, Y+33	; 0x21
    1acc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ace:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_displayCharacter+0x1ea>
    1ada:	9e 8f       	std	Y+30, r25	; 0x1e
    1adc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	69 ad       	ldd	r22, Y+57	; 0x39
    1ae2:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_writePort>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	89 8f       	std	Y+25, r24	; 0x19
    1af0:	9a 8f       	std	Y+26, r25	; 0x1a
    1af2:	ab 8f       	std	Y+27, r26	; 0x1b
    1af4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	69 8d       	ldd	r22, Y+25	; 0x19
    1af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a e7       	ldi	r20, 0x7A	; 122
    1b04:	53 e4       	ldi	r21, 0x43	; 67
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8d 8b       	std	Y+21, r24	; 0x15
    1b10:	9e 8b       	std	Y+22, r25	; 0x16
    1b12:	af 8b       	std	Y+23, r26	; 0x17
    1b14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 8b       	std	Y+20, r25	; 0x14
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	69 8d       	ldd	r22, Y+25	; 0x19
    1b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_displayCharacter+0x2ac>
    1b7a:	89 e1       	ldi	r24, 0x19	; 25
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9a 8b       	std	Y+18, r25	; 0x12
    1b80:	89 8b       	std	Y+17, r24	; 0x11
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	9a 89       	ldd	r25, Y+18	; 0x12
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_displayCharacter+0x29a>
    1b8a:	9a 8b       	std	Y+18, r25	; 0x12
    1b8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	9c 89       	ldd	r25, Y+20	; 0x14
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_displayCharacter+0x28e>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	98 8b       	std	Y+16, r25	; 0x10
    1bbc:	8f 87       	std	Y+15, r24	; 0x0f
    1bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc0:	98 89       	ldd	r25, Y+16	; 0x10
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_displayCharacter+0x2d6>
    1bc6:	98 8b       	std	Y+16, r25	; 0x10
    1bc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	8b 87       	std	Y+11, r24	; 0x0b
    1bde:	9c 87       	std	Y+12, r25	; 0x0c
    1be0:	ad 87       	std	Y+13, r26	; 0x0d
    1be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8f 83       	std	Y+7, r24	; 0x07
    1bfe:	98 87       	std	Y+8, r25	; 0x08
    1c00:	a9 87       	std	Y+9, r26	; 0x09
    1c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_displayCharacter+0x39a>
    1c68:	89 e1       	ldi	r24, 0x19	; 25
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_displayCharacter+0x388>
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_displayCharacter+0x37c>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_displayCharacter+0x3c4>
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cb8:	e9 96       	adiw	r28, 0x39	; 57
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LCD_displayString+0x6>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	9b 83       	std	Y+3, r25	; 0x03
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	0e c0       	rjmp	.+28     	; 0x1cfa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e2 0f       	add	r30, r18
    1cec:	f3 1f       	adc	r31, r19
    1cee:	80 81       	ld	r24, Z
    1cf0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
		i++;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	fc 01       	movw	r30, r24
    1d06:	e2 0f       	add	r30, r18
    1d08:	f3 1f       	adc	r31, r19
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	39 f7       	brne	.-50     	; 0x1cde <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <LCD_moveCursor+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <LCD_moveCursor+0x8>
    1d24:	0f 92       	push	r0
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3d 83       	std	Y+5, r19	; 0x05
    1d36:	2c 83       	std	Y+4, r18	; 0x04
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	c1 f0       	breq	.+48     	; 0x1d72 <LCD_moveCursor+0x56>
    1d42:	2c 81       	ldd	r18, Y+4	; 0x04
    1d44:	3d 81       	ldd	r19, Y+5	; 0x05
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_moveCursor+0x3a>
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f0       	breq	.+24     	; 0x1d6c <LCD_moveCursor+0x50>
    1d54:	19 c0       	rjmp	.+50     	; 0x1d88 <LCD_moveCursor+0x6c>
    1d56:	2c 81       	ldd	r18, Y+4	; 0x04
    1d58:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	69 f0       	breq	.+26     	; 0x1d7a <LCD_moveCursor+0x5e>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	61 f0       	breq	.+24     	; 0x1d82 <LCD_moveCursor+0x66>
    1d6a:	0e c0       	rjmp	.+28     	; 0x1d88 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	0b c0       	rjmp	.+22     	; 0x1d88 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	80 5c       	subi	r24, 0xC0	; 192
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	80 5f       	subi	r24, 0xF0	; 240
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	80 5b       	subi	r24, 0xB0	; 176
    1d86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	80 68       	ori	r24, 0x80	; 128
    1d8c:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_sendCommand>
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <LCD_displayStringRowColumn+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <LCD_displayStringRowColumn+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	6a 83       	std	Y+2, r22	; 0x02
    1db0:	5c 83       	std	Y+4, r21	; 0x04
    1db2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	6a 81       	ldd	r22, Y+2	; 0x02
    1db8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	62 97       	sbiw	r28, 0x12	; 18
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	9a 8b       	std	Y+18, r25	; 0x12
    1de8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1dea:	89 89       	ldd	r24, Y+17	; 0x11
    1dec:	9a 89       	ldd	r25, Y+18	; 0x12
    1dee:	9e 01       	movw	r18, r28
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	b9 01       	movw	r22, r18
    1df6:	4a e0       	ldi	r20, 0x0A	; 10
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <itoa>
   LCD_displayString(buff); /* Display the string */
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
}
    1e06:	62 96       	adiw	r28, 0x12	; 18
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_sendCommand>
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <KEYPAD_getPressedKey+0x6>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	35 c0       	rjmp	.+106    	; 0x1ef4 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	69 81       	ldd	r22, Y+1	; 0x01
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	69 81       	ldd	r22, Y+1	; 0x01
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 a3 06 	call	0xd46	; 0xd46 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e9e:	1a 82       	std	Y+2, r1	; 0x02
    1ea0:	1e c0       	rjmp	.+60     	; 0x1ede <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	9c 5f       	subi	r25, 0xFC	; 252
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	69 2f       	mov	r22, r25
    1eac:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_readPin>
    1eb0:	88 23       	and	r24, r24
    1eb2:	91 f4       	brne	.+36     	; 0x1ed8 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	98 2f       	mov	r25, r24
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	89 0f       	add	r24, r25
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	84 30       	cpi	r24, 0x04	; 4
    1ee2:	f8 f2       	brcs	.-66     	; 0x1ea2 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	69 81       	ldd	r22, Y+1	; 0x01
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 b8 05 	call	0xb70	; 0xb70 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	84 30       	cpi	r24, 0x04	; 4
    1ef8:	40 f2       	brcs	.-112    	; 0x1e8a <KEYPAD_getPressedKey+0x5e>
    1efa:	c5 cf       	rjmp	.-118    	; 0x1e86 <KEYPAD_getPressedKey+0x5a>

00001efc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3c 83       	std	Y+4, r19	; 0x04
    1f14:	2b 83       	std	Y+3, r18	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	88 30       	cpi	r24, 0x08	; 8
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f20:	70 c0       	rjmp	.+224    	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	29 30       	cpi	r18, 0x09	; 9
    1f28:	31 05       	cpc	r19, r1
    1f2a:	5c f5       	brge	.+86     	; 0x1f82 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f36:	59 c0       	rjmp	.+178    	; 0x1fea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	25 30       	cpi	r18, 0x05	; 5
    1f3e:	31 05       	cpc	r19, r1
    1f40:	9c f4       	brge	.+38     	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f4c:	48 c0       	rjmp	.+144    	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	23 30       	cpi	r18, 0x03	; 3
    1f54:	31 05       	cpc	r19, r1
    1f56:	0c f0       	brlt	.+2      	; 0x1f5a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f58:	45 c0       	rjmp	.+138    	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f64:	39 c0       	rjmp	.+114    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f66:	67 c0       	rjmp	.+206    	; 0x2036 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	26 30       	cpi	r18, 0x06	; 6
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f72:	41 c0       	rjmp	.+130    	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	87 30       	cpi	r24, 0x07	; 7
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f7e:	3e c0       	rjmp	.+124    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f80:	37 c0       	rjmp	.+110    	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	2c 30       	cpi	r18, 0x0C	; 12
    1f88:	31 05       	cpc	r19, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f8c:	46 c0       	rjmp	.+140    	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	8d 30       	cpi	r24, 0x0D	; 13
    1f94:	91 05       	cpc	r25, r1
    1f96:	5c f4       	brge	.+22     	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	2a 30       	cpi	r18, 0x0A	; 10
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	b1 f1       	breq	.+108    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	8b 30       	cpi	r24, 0x0B	; 11
    1fa8:	91 05       	cpc	r25, r1
    1faa:	a4 f5       	brge	.+104    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fac:	2d c0       	rjmp	.+90     	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	2e 30       	cpi	r18, 0x0E	; 14
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	b9 f1       	breq	.+110    	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	8e 30       	cpi	r24, 0x0E	; 14
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	7c f1       	brlt	.+94     	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	2f 30       	cpi	r18, 0x0F	; 15
    1fc8:	31 05       	cpc	r19, r1
    1fca:	79 f1       	breq	.+94     	; 0x202a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	80 31       	cpi	r24, 0x10	; 16
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	69 f1       	breq	.+90     	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fd6:	2f c0       	rjmp	.+94     	; 0x2036 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fd8:	87 e0       	ldi	r24, 0x07	; 7
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	2e c0       	rjmp	.+92     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fde:	88 e0       	ldi	r24, 0x08	; 8
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	2b c0       	rjmp	.+86     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fe4:	89 e0       	ldi	r24, 0x09	; 9
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	28 c0       	rjmp	.+80     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fea:	85 e2       	ldi	r24, 0x25	; 37
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	25 c0       	rjmp	.+74     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ff0:	84 e0       	ldi	r24, 0x04	; 4
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	22 c0       	rjmp	.+68     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ff6:	85 e0       	ldi	r24, 0x05	; 5
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	1f c0       	rjmp	.+62     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ffc:	86 e0       	ldi	r24, 0x06	; 6
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	1c c0       	rjmp	.+56     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2002:	8a e2       	ldi	r24, 0x2A	; 42
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	19 c0       	rjmp	.+50     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	16 c0       	rjmp	.+44     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	13 c0       	rjmp	.+38     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	10 c0       	rjmp	.+32     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    201a:	8d e2       	ldi	r24, 0x2D	; 45
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	0d c0       	rjmp	.+26     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 127;  /* ASCII of Enter */
    2020:	8f e7       	ldi	r24, 0x7F	; 127
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	0a c0       	rjmp	.+20     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	08 c0       	rjmp	.+16     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    202a:	8d e3       	ldi	r24, 0x3D	; 61
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	05 c0       	rjmp	.+10     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2030:	8b e2       	ldi	r24, 0x2B	; 43
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	02 c0       	rjmp	.+4      	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <displayKeypadOnLcd>:


 uint8 count=0; // global counter for entered characters

void displayKeypadOnLcd(uint8 keypadCharacter)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01

	LCD_moveCursor(0,count);
    2056:	90 91 b0 00 	lds	r25, 0x00B0
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	69 2f       	mov	r22, r25
    205e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
	// if clear button is pressed, clear a character on LCD
	if(keypadCharacter==127 && count>0)
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	8f 37       	cpi	r24, 0x7F	; 127
    2066:	99 f4       	brne	.+38     	; 0x208e <displayKeypadOnLcd+0x44>
    2068:	80 91 b0 00 	lds	r24, 0x00B0
    206c:	88 23       	and	r24, r24
    206e:	79 f0       	breq	.+30     	; 0x208e <displayKeypadOnLcd+0x44>
	{
		LCD_moveCursor(0,--count);
    2070:	80 91 b0 00 	lds	r24, 0x00B0
    2074:	81 50       	subi	r24, 0x01	; 1
    2076:	80 93 b0 00 	sts	0x00B0, r24
    207a:	90 91 b0 00 	lds	r25, 0x00B0
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	69 2f       	mov	r22, r25
    2082:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
		LCD_displayCharacter(' ');
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
    208c:	23 c0       	rjmp	.+70     	; 0x20d4 <displayKeypadOnLcd+0x8a>
	}
	else if(count == 0 && (keypadCharacter==127 || keypadCharacter=='='))
    208e:	80 91 b0 00 	lds	r24, 0x00B0
    2092:	88 23       	and	r24, r24
    2094:	31 f4       	brne	.+12     	; 0x20a2 <displayKeypadOnLcd+0x58>
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	8f 37       	cpi	r24, 0x7F	; 127
    209a:	e1 f0       	breq	.+56     	; 0x20d4 <displayKeypadOnLcd+0x8a>
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	8d 33       	cpi	r24, 0x3D	; 61
    20a0:	c9 f0       	breq	.+50     	; 0x20d4 <displayKeypadOnLcd+0x8a>
	{
		// print nothing
	}
	else if(keypadCharacter=='=')
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	8d 33       	cpi	r24, 0x3D	; 61
    20a6:	b1 f0       	breq	.+44     	; 0x20d4 <displayKeypadOnLcd+0x8a>
	{
		//print nothing
	}
	else if(keypadCharacter >=0 && keypadCharacter <=9)
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	8a 30       	cpi	r24, 0x0A	; 10
    20ac:	58 f4       	brcc	.+22     	; 0x20c4 <displayKeypadOnLcd+0x7a>
	{
		LCD_intgerToString(keypadCharacter);
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_intgerToString>
		count++;
    20b8:	80 91 b0 00 	lds	r24, 0x00B0
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	80 93 b0 00 	sts	0x00B0, r24
    20c2:	08 c0       	rjmp	.+16     	; 0x20d4 <displayKeypadOnLcd+0x8a>
	}
	else
	{
	LCD_displayCharacter(keypadCharacter);
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
	count++;
    20ca:	80 91 b0 00 	lds	r24, 0x00B0
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	80 93 b0 00 	sts	0x00B0, r24
	}

}
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <fillOperationArray>:


void fillOperationArray(uint8 keypadCharacter, uint8 operationArray[16])
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <fillOperationArray+0x6>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	7b 83       	std	Y+3, r23	; 0x03
    20ec:	6a 83       	std	Y+2, r22	; 0x02
static uint8 i=0;


if (keypadCharacter >=0 && keypadCharacter <=9 )
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	8a 30       	cpi	r24, 0x0A	; 10
    20f2:	90 f4       	brcc	.+36     	; 0x2118 <fillOperationArray+0x3c>
{
	operationArray[i]=keypadCharacter+'0';
    20f4:	80 91 b1 00 	lds	r24, 0x00B1
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	fc 01       	movw	r30, r24
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	80 5d       	subi	r24, 0xD0	; 208
    210a:	80 83       	st	Z, r24
	i++;
    210c:	80 91 b1 00 	lds	r24, 0x00B1
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	80 93 b1 00 	sts	0x00B1, r24
    2116:	2f c0       	rjmp	.+94     	; 0x2176 <fillOperationArray+0x9a>
}

else if(keypadCharacter == '+' || keypadCharacter == '-' || keypadCharacter == '*' || keypadCharacter == '%'  )
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	8b 32       	cpi	r24, 0x2B	; 43
    211c:	49 f0       	breq	.+18     	; 0x2130 <fillOperationArray+0x54>
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	8d 32       	cpi	r24, 0x2D	; 45
    2122:	31 f0       	breq	.+12     	; 0x2130 <fillOperationArray+0x54>
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	8a 32       	cpi	r24, 0x2A	; 42
    2128:	19 f0       	breq	.+6      	; 0x2130 <fillOperationArray+0x54>
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	85 32       	cpi	r24, 0x25	; 37
    212e:	89 f4       	brne	.+34     	; 0x2152 <fillOperationArray+0x76>
{
	operationArray[i]=keypadCharacter;
    2130:	80 91 b1 00 	lds	r24, 0x00B1
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	80 83       	st	Z, r24
	i++; // start a new string
    2146:	80 91 b1 00 	lds	r24, 0x00B1
    214a:	8f 5f       	subi	r24, 0xFF	; 255
    214c:	80 93 b1 00 	sts	0x00B1, r24
    2150:	12 c0       	rjmp	.+36     	; 0x2176 <fillOperationArray+0x9a>
}
/*if clear button is pressed on keypad*/

else if (keypadCharacter== 127)
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	8f 37       	cpi	r24, 0x7F	; 127
    2156:	79 f4       	brne	.+30     	; 0x2176 <fillOperationArray+0x9a>
{
	operationArray[--i]='\0';
    2158:	80 91 b1 00 	lds	r24, 0x00B1
    215c:	81 50       	subi	r24, 0x01	; 1
    215e:	80 93 b1 00 	sts	0x00B1, r24
    2162:	80 91 b1 00 	lds	r24, 0x00B1
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	10 82       	st	Z, r1
}
else
{
// do nothing
}
operationArray[i]='\0';
    2176:	80 91 b1 00 	lds	r24, 0x00B1
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	fc 01       	movw	r30, r24
    2184:	e2 0f       	add	r30, r18
    2186:	f3 1f       	adc	r31, r19
    2188:	10 82       	st	Z, r1
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <printAnswer>:


void printAnswer(sint32 answer)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <printAnswer+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <printAnswer+0x8>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	69 83       	std	Y+1, r22	; 0x01
    21a4:	7a 83       	std	Y+2, r23	; 0x02
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,3);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	63 e0       	ldi	r22, 0x03	; 3
    21ae:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
	LCD_intgerToString(answer);
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_intgerToString>
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <operationIsValid>:


Operation_state_EN operationIsValid(uint8 *arr)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	27 97       	sbiw	r28, 0x07	; 7
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
	uint8 *ptr=arr;
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
	// if only an operator is entered
	if( (ptr[0]== '*') || ptr[0]== '%' || (( (ptr[0]== '+') || (ptr[0]== '-') ) &&  count==1 ))
    21e8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ea:	fc 81       	ldd	r31, Y+4	; 0x04
    21ec:	80 81       	ld	r24, Z
    21ee:	8a 32       	cpi	r24, 0x2A	; 42
    21f0:	99 f0       	breq	.+38     	; 0x2218 <operationIsValid+0x50>
    21f2:	eb 81       	ldd	r30, Y+3	; 0x03
    21f4:	fc 81       	ldd	r31, Y+4	; 0x04
    21f6:	80 81       	ld	r24, Z
    21f8:	85 32       	cpi	r24, 0x25	; 37
    21fa:	71 f0       	breq	.+28     	; 0x2218 <operationIsValid+0x50>
    21fc:	eb 81       	ldd	r30, Y+3	; 0x03
    21fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2200:	80 81       	ld	r24, Z
    2202:	8b 32       	cpi	r24, 0x2B	; 43
    2204:	29 f0       	breq	.+10     	; 0x2210 <operationIsValid+0x48>
    2206:	eb 81       	ldd	r30, Y+3	; 0x03
    2208:	fc 81       	ldd	r31, Y+4	; 0x04
    220a:	80 81       	ld	r24, Z
    220c:	8d 32       	cpi	r24, 0x2D	; 45
    220e:	39 f4       	brne	.+14     	; 0x221e <operationIsValid+0x56>
    2210:	80 91 b0 00 	lds	r24, 0x00B0
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	19 f4       	brne	.+6      	; 0x221e <operationIsValid+0x56>
		{
			return SYNTAX_ERROR ;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	8f 83       	std	Y+7, r24	; 0x07
    221c:	78 c0       	rjmp	.+240    	; 0x230e <operationIsValid+0x146>
		}

	// checking the right and left operand of every operator
	else
	{
		for(int i=1;arr[i]!='\0';i++)
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	67 c0       	rjmp	.+206    	; 0x22f6 <operationIsValid+0x12e>
		{
		if(ptr[i]== '+' || ptr[i] == '-' || ptr[i]== '*' || ptr[i]== '%')
    2228:	29 81       	ldd	r18, Y+1	; 0x01
    222a:	3a 81       	ldd	r19, Y+2	; 0x02
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	8b 32       	cpi	r24, 0x2B	; 43
    223a:	f1 f0       	breq	.+60     	; 0x2278 <operationIsValid+0xb0>
    223c:	29 81       	ldd	r18, Y+1	; 0x01
    223e:	3a 81       	ldd	r19, Y+2	; 0x02
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	fc 01       	movw	r30, r24
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	80 81       	ld	r24, Z
    224c:	8d 32       	cpi	r24, 0x2D	; 45
    224e:	a1 f0       	breq	.+40     	; 0x2278 <operationIsValid+0xb0>
    2250:	29 81       	ldd	r18, Y+1	; 0x01
    2252:	3a 81       	ldd	r19, Y+2	; 0x02
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	fc 01       	movw	r30, r24
    225a:	e2 0f       	add	r30, r18
    225c:	f3 1f       	adc	r31, r19
    225e:	80 81       	ld	r24, Z
    2260:	8a 32       	cpi	r24, 0x2A	; 42
    2262:	51 f0       	breq	.+20     	; 0x2278 <operationIsValid+0xb0>
    2264:	29 81       	ldd	r18, Y+1	; 0x01
    2266:	3a 81       	ldd	r19, Y+2	; 0x02
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	fc 01       	movw	r30, r24
    226e:	e2 0f       	add	r30, r18
    2270:	f3 1f       	adc	r31, r19
    2272:	80 81       	ld	r24, Z
    2274:	85 32       	cpi	r24, 0x25	; 37
    2276:	d1 f5       	brne	.+116    	; 0x22ec <operationIsValid+0x124>
		{
		if(! ((ptr[i+1]>='0') && (ptr[i+1]<='9')) )
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	9c 01       	movw	r18, r24
    227e:	2f 5f       	subi	r18, 0xFF	; 255
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	fc 01       	movw	r30, r24
    2288:	e2 0f       	add	r30, r18
    228a:	f3 1f       	adc	r31, r19
    228c:	80 81       	ld	r24, Z
    228e:	80 33       	cpi	r24, 0x30	; 48
    2290:	68 f0       	brcs	.+26     	; 0x22ac <operationIsValid+0xe4>
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	9c 01       	movw	r18, r24
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	fc 01       	movw	r30, r24
    22a2:	e2 0f       	add	r30, r18
    22a4:	f3 1f       	adc	r31, r19
    22a6:	80 81       	ld	r24, Z
    22a8:	8a 33       	cpi	r24, 0x3A	; 58
    22aa:	18 f0       	brcs	.+6      	; 0x22b2 <operationIsValid+0xea>
		   {
			 return SYNTAX_ERROR ;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8f 83       	std	Y+7, r24	; 0x07
    22b0:	2e c0       	rjmp	.+92     	; 0x230e <operationIsValid+0x146>
		   }
		  else if(! ((ptr[i-1]>='0') && (ptr[i-1]<='9')) )
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	9c 01       	movw	r18, r24
    22b8:	21 50       	subi	r18, 0x01	; 1
    22ba:	30 40       	sbci	r19, 0x00	; 0
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	fc 01       	movw	r30, r24
    22c2:	e2 0f       	add	r30, r18
    22c4:	f3 1f       	adc	r31, r19
    22c6:	80 81       	ld	r24, Z
    22c8:	80 33       	cpi	r24, 0x30	; 48
    22ca:	68 f0       	brcs	.+26     	; 0x22e6 <operationIsValid+0x11e>
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	9c 01       	movw	r18, r24
    22d2:	21 50       	subi	r18, 0x01	; 1
    22d4:	30 40       	sbci	r19, 0x00	; 0
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	80 81       	ld	r24, Z
    22e2:	8a 33       	cpi	r24, 0x3A	; 58
    22e4:	18 f0       	brcs	.+6      	; 0x22ec <operationIsValid+0x124>
		   {
			 return SYNTAX_ERROR ;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	8f 83       	std	Y+7, r24	; 0x07
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <operationIsValid+0x146>
		}

	// checking the right and left operand of every operator
	else
	{
		for(int i=1;arr[i]!='\0';i++)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	29 81       	ldd	r18, Y+1	; 0x01
    22f8:	3a 81       	ldd	r19, Y+2	; 0x02
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	fc 01       	movw	r30, r24
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	09 f0       	breq	.+2      	; 0x230c <operationIsValid+0x144>
    230a:	8e cf       	rjmp	.-228    	; 0x2228 <operationIsValid+0x60>
		{
          // do nothing
		}
	 }
	}
	return VALID_OPERATION;
    230c:	1f 82       	std	Y+7, r1	; 0x07
    230e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2310:	27 96       	adiw	r28, 0x07	; 7
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <computeAnswer>:

sint32 computeAnswer(uint8 *arr)
{
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	e8 97       	sbiw	r28, 0x38	; 56
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	9c ab       	std	Y+52, r25	; 0x34
    233c:	8b ab       	std	Y+51, r24	; 0x33
	uint8 *ptr=arr;
    233e:	8b a9       	ldd	r24, Y+51	; 0x33
    2340:	9c a9       	ldd	r25, Y+52	; 0x34
    2342:	98 8b       	std	Y+16, r25	; 0x10
    2344:	8f 87       	std	Y+15, r24	; 0x0f
	sint32 answer=0;
    2346:	1b 86       	std	Y+11, r1	; 0x0b
    2348:	1c 86       	std	Y+12, r1	; 0x0c
    234a:	1d 86       	std	Y+13, r1	; 0x0d
    234c:	1e 86       	std	Y+14, r1	; 0x0e
    int leftIndex=15;
    234e:	8f e0       	ldi	r24, 0x0F	; 15
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a 87       	std	Y+10, r25	; 0x0a
    2354:	89 87       	std	Y+9, r24	; 0x09
    int rightIndex=0;
    2356:	18 86       	std	Y+8, r1	; 0x08
    2358:	1f 82       	std	Y+7, r1	; 0x07
    int operationCounts=0;
    235a:	1e 82       	std	Y+6, r1	; 0x06
    235c:	1d 82       	std	Y+5, r1	; 0x05
	int i=0; // for looping on operation array
    235e:	1c 82       	std	Y+4, r1	; 0x04
    2360:	1b 82       	std	Y+3, r1	; 0x03
	int j=0; // for filling the operands
    2362:	1a 82       	std	Y+2, r1	; 0x02
    2364:	19 82       	std	Y+1, r1	; 0x01
	uint8 extractLeftOperand[17]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','\0'};
    2366:	81 e1       	ldi	r24, 0x11	; 17
    2368:	fe 01       	movw	r30, r28
    236a:	71 96       	adiw	r30, 0x11	; 17
    236c:	df 01       	movw	r26, r30
    236e:	28 2f       	mov	r18, r24
    2370:	1d 92       	st	X+, r1
    2372:	2a 95       	dec	r18
    2374:	e9 f7       	brne	.-6      	; 0x2370 <computeAnswer+0x4e>
    2376:	80 e3       	ldi	r24, 0x30	; 48
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	80 e3       	ldi	r24, 0x30	; 48
    237c:	8a 8b       	std	Y+18, r24	; 0x12
    237e:	80 e3       	ldi	r24, 0x30	; 48
    2380:	8b 8b       	std	Y+19, r24	; 0x13
    2382:	80 e3       	ldi	r24, 0x30	; 48
    2384:	8c 8b       	std	Y+20, r24	; 0x14
    2386:	80 e3       	ldi	r24, 0x30	; 48
    2388:	8d 8b       	std	Y+21, r24	; 0x15
    238a:	80 e3       	ldi	r24, 0x30	; 48
    238c:	8e 8b       	std	Y+22, r24	; 0x16
    238e:	80 e3       	ldi	r24, 0x30	; 48
    2390:	8f 8b       	std	Y+23, r24	; 0x17
    2392:	80 e3       	ldi	r24, 0x30	; 48
    2394:	88 8f       	std	Y+24, r24	; 0x18
    2396:	80 e3       	ldi	r24, 0x30	; 48
    2398:	89 8f       	std	Y+25, r24	; 0x19
    239a:	80 e3       	ldi	r24, 0x30	; 48
    239c:	8a 8f       	std	Y+26, r24	; 0x1a
    239e:	80 e3       	ldi	r24, 0x30	; 48
    23a0:	8b 8f       	std	Y+27, r24	; 0x1b
    23a2:	80 e3       	ldi	r24, 0x30	; 48
    23a4:	8c 8f       	std	Y+28, r24	; 0x1c
    23a6:	80 e3       	ldi	r24, 0x30	; 48
    23a8:	8d 8f       	std	Y+29, r24	; 0x1d
    23aa:	80 e3       	ldi	r24, 0x30	; 48
    23ac:	8e 8f       	std	Y+30, r24	; 0x1e
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 extractRightOperand[17]= {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
    23b2:	81 e1       	ldi	r24, 0x11	; 17
    23b4:	fe 01       	movw	r30, r28
    23b6:	b2 96       	adiw	r30, 0x22	; 34
    23b8:	df 01       	movw	r26, r30
    23ba:	28 2f       	mov	r18, r24
    23bc:	1d 92       	st	X+, r1
    23be:	2a 95       	dec	r18
    23c0:	e9 f7       	brne	.-6      	; 0x23bc <computeAnswer+0x9a>
    23c2:	d0 c0       	rjmp	.+416    	; 0x2564 <computeAnswer+0x242>


	/* loop on the operation elements to find multiplication or division operators first*/
	while(ptr[i]!='\0')
	  {
		if(ptr[i] =='*' || ptr[i] =='%' )
    23c4:	2b 81       	ldd	r18, Y+3	; 0x03
    23c6:	3c 81       	ldd	r19, Y+4	; 0x04
    23c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ca:	98 89       	ldd	r25, Y+16	; 0x10
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	80 81       	ld	r24, Z
    23d4:	8a 32       	cpi	r24, 0x2A	; 42
    23d6:	59 f0       	breq	.+22     	; 0x23ee <computeAnswer+0xcc>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	80 81       	ld	r24, Z
    23e8:	85 32       	cpi	r24, 0x25	; 37
    23ea:	09 f0       	breq	.+2      	; 0x23ee <computeAnswer+0xcc>
    23ec:	b6 c0       	rjmp	.+364    	; 0x255a <computeAnswer+0x238>
		{
			operationCounts++;
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
	/* extract the left operand of the operation*/
			j=i-1;
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	1a c0       	rjmp	.+52     	; 0x2438 <computeAnswer+0x116>
			while(ptr[j]>='0' && ptr[j]<='9' && j>=0)
			{
				extractLeftOperand[leftIndex]=ptr[j];
    2404:	49 85       	ldd	r20, Y+9	; 0x09
    2406:	5a 85       	ldd	r21, Y+10	; 0x0a
    2408:	29 81       	ldd	r18, Y+1	; 0x01
    240a:	3a 81       	ldd	r19, Y+2	; 0x02
    240c:	8f 85       	ldd	r24, Y+15	; 0x0f
    240e:	98 89       	ldd	r25, Y+16	; 0x10
    2410:	fc 01       	movw	r30, r24
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	20 81       	ld	r18, Z
    2418:	ce 01       	movw	r24, r28
    241a:	41 96       	adiw	r24, 0x11	; 17
    241c:	fc 01       	movw	r30, r24
    241e:	e4 0f       	add	r30, r20
    2420:	f5 1f       	adc	r31, r21
    2422:	20 83       	st	Z, r18
				leftIndex--;
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	9a 87       	std	Y+10, r25	; 0x0a
    242c:	89 87       	std	Y+9, r24	; 0x09
				j--;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
		if(ptr[i] =='*' || ptr[i] =='%' )
		{
			operationCounts++;
	/* extract the left operand of the operation*/
			j=i-1;
			while(ptr[j]>='0' && ptr[j]<='9' && j>=0)
    2438:	29 81       	ldd	r18, Y+1	; 0x01
    243a:	3a 81       	ldd	r19, Y+2	; 0x02
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	98 89       	ldd	r25, Y+16	; 0x10
    2440:	fc 01       	movw	r30, r24
    2442:	e2 0f       	add	r30, r18
    2444:	f3 1f       	adc	r31, r19
    2446:	80 81       	ld	r24, Z
    2448:	80 33       	cpi	r24, 0x30	; 48
    244a:	70 f0       	brcs	.+28     	; 0x2468 <computeAnswer+0x146>
    244c:	29 81       	ldd	r18, Y+1	; 0x01
    244e:	3a 81       	ldd	r19, Y+2	; 0x02
    2450:	8f 85       	ldd	r24, Y+15	; 0x0f
    2452:	98 89       	ldd	r25, Y+16	; 0x10
    2454:	fc 01       	movw	r30, r24
    2456:	e2 0f       	add	r30, r18
    2458:	f3 1f       	adc	r31, r19
    245a:	80 81       	ld	r24, Z
    245c:	8a 33       	cpi	r24, 0x3A	; 58
    245e:	20 f4       	brcc	.+8      	; 0x2468 <computeAnswer+0x146>
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	99 23       	and	r25, r25
    2466:	74 f6       	brge	.-100    	; 0x2404 <computeAnswer+0xe2>
				extractLeftOperand[leftIndex]=ptr[j];
				leftIndex--;
				j--;
			}
	/*extract the right operand of the operation*/
			j=i+1;
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	1a c0       	rjmp	.+52     	; 0x24a8 <computeAnswer+0x186>
			while(ptr[j]>='0' && ptr[j]<='9' && ptr[j]!='\0')
			{
				extractRightOperand[rightIndex]=ptr[j];
    2474:	4f 81       	ldd	r20, Y+7	; 0x07
    2476:	58 85       	ldd	r21, Y+8	; 0x08
    2478:	29 81       	ldd	r18, Y+1	; 0x01
    247a:	3a 81       	ldd	r19, Y+2	; 0x02
    247c:	8f 85       	ldd	r24, Y+15	; 0x0f
    247e:	98 89       	ldd	r25, Y+16	; 0x10
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	20 81       	ld	r18, Z
    2488:	ce 01       	movw	r24, r28
    248a:	82 96       	adiw	r24, 0x22	; 34
    248c:	fc 01       	movw	r30, r24
    248e:	e4 0f       	add	r30, r20
    2490:	f5 1f       	adc	r31, r21
    2492:	20 83       	st	Z, r18
				rightIndex++;
    2494:	8f 81       	ldd	r24, Y+7	; 0x07
    2496:	98 85       	ldd	r25, Y+8	; 0x08
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	98 87       	std	Y+8, r25	; 0x08
    249c:	8f 83       	std	Y+7, r24	; 0x07
				j++;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
				leftIndex--;
				j--;
			}
	/*extract the right operand of the operation*/
			j=i+1;
			while(ptr[j]>='0' && ptr[j]<='9' && ptr[j]!='\0')
    24a8:	29 81       	ldd	r18, Y+1	; 0x01
    24aa:	3a 81       	ldd	r19, Y+2	; 0x02
    24ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ae:	98 89       	ldd	r25, Y+16	; 0x10
    24b0:	fc 01       	movw	r30, r24
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	80 81       	ld	r24, Z
    24b8:	80 33       	cpi	r24, 0x30	; 48
    24ba:	a0 f0       	brcs	.+40     	; 0x24e4 <computeAnswer+0x1c2>
    24bc:	29 81       	ldd	r18, Y+1	; 0x01
    24be:	3a 81       	ldd	r19, Y+2	; 0x02
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	fc 01       	movw	r30, r24
    24c6:	e2 0f       	add	r30, r18
    24c8:	f3 1f       	adc	r31, r19
    24ca:	80 81       	ld	r24, Z
    24cc:	8a 33       	cpi	r24, 0x3A	; 58
    24ce:	50 f4       	brcc	.+20     	; 0x24e4 <computeAnswer+0x1c2>
    24d0:	29 81       	ldd	r18, Y+1	; 0x01
    24d2:	3a 81       	ldd	r19, Y+2	; 0x02
    24d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d6:	98 89       	ldd	r25, Y+16	; 0x10
    24d8:	fc 01       	movw	r30, r24
    24da:	e2 0f       	add	r30, r18
    24dc:	f3 1f       	adc	r31, r19
    24de:	80 81       	ld	r24, Z
    24e0:	88 23       	and	r24, r24
    24e2:	41 f6       	brne	.-112    	; 0x2474 <computeAnswer+0x152>
				extractRightOperand[rightIndex]=ptr[j];
				rightIndex++;
				j++;
			}
   /*execute operation*/
			if (ptr[i] =='*')
    24e4:	2b 81       	ldd	r18, Y+3	; 0x03
    24e6:	3c 81       	ldd	r19, Y+4	; 0x04
    24e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ea:	98 89       	ldd	r25, Y+16	; 0x10
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	80 81       	ld	r24, Z
    24f4:	8a 32       	cpi	r24, 0x2A	; 42
    24f6:	d1 f4       	brne	.+52     	; 0x252c <computeAnswer+0x20a>
			{
			answer= atoi((const char *)extractLeftOperand) * atoi((const char *)extractRightOperand);
    24f8:	ce 01       	movw	r24, r28
    24fa:	41 96       	adiw	r24, 0x11	; 17
    24fc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    2500:	8c 01       	movw	r16, r24
    2502:	ce 01       	movw	r24, r28
    2504:	82 96       	adiw	r24, 0x22	; 34
    2506:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    250a:	dc 01       	movw	r26, r24
    250c:	0a 9f       	mul	r16, r26
    250e:	c0 01       	movw	r24, r0
    2510:	0b 9f       	mul	r16, r27
    2512:	90 0d       	add	r25, r0
    2514:	1a 9f       	mul	r17, r26
    2516:	90 0d       	add	r25, r0
    2518:	11 24       	eor	r1, r1
    251a:	aa 27       	eor	r26, r26
    251c:	97 fd       	sbrc	r25, 7
    251e:	a0 95       	com	r26
    2520:	ba 2f       	mov	r27, r26
    2522:	8b 87       	std	Y+11, r24	; 0x0b
    2524:	9c 87       	std	Y+12, r25	; 0x0c
    2526:	ad 87       	std	Y+13, r26	; 0x0d
    2528:	be 87       	std	Y+14, r27	; 0x0e
    252a:	17 c0       	rjmp	.+46     	; 0x255a <computeAnswer+0x238>
			}
			else
			{
			answer =  atoi((const char *)extractLeftOperand) / atoi((const char *)extractRightOperand) ;
    252c:	ce 01       	movw	r24, r28
    252e:	41 96       	adiw	r24, 0x11	; 17
    2530:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    2534:	8c 01       	movw	r16, r24
    2536:	ce 01       	movw	r24, r28
    2538:	82 96       	adiw	r24, 0x22	; 34
    253a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    253e:	9c 01       	movw	r18, r24
    2540:	c8 01       	movw	r24, r16
    2542:	b9 01       	movw	r22, r18
    2544:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__divmodhi4>
    2548:	cb 01       	movw	r24, r22
    254a:	aa 27       	eor	r26, r26
    254c:	97 fd       	sbrc	r25, 7
    254e:	a0 95       	com	r26
    2550:	ba 2f       	mov	r27, r26
    2552:	8b 87       	std	Y+11, r24	; 0x0b
    2554:	9c 87       	std	Y+12, r25	; 0x0c
    2556:	ad 87       	std	Y+13, r26	; 0x0d
    2558:	be 87       	std	Y+14, r27	; 0x0e
			}

		}
		i++; /* incerement counter if no operation is found*/
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
	uint8 extractRightOperand[17]= {'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};
	/* only a number is entered and */


	/* loop on the operation elements to find multiplication or division operators first*/
	while(ptr[i]!='\0')
    2564:	2b 81       	ldd	r18, Y+3	; 0x03
    2566:	3c 81       	ldd	r19, Y+4	; 0x04
    2568:	8f 85       	ldd	r24, Y+15	; 0x0f
    256a:	98 89       	ldd	r25, Y+16	; 0x10
    256c:	fc 01       	movw	r30, r24
    256e:	e2 0f       	add	r30, r18
    2570:	f3 1f       	adc	r31, r19
    2572:	80 81       	ld	r24, Z
    2574:	88 23       	and	r24, r24
    2576:	09 f0       	breq	.+2      	; 0x257a <computeAnswer+0x258>
    2578:	25 cf       	rjmp	.-438    	; 0x23c4 <computeAnswer+0xa2>

		}
		i++; /* incerement counter if no operation is found*/
	  }

	i=0;
    257a:	1c 82       	std	Y+4, r1	; 0x04
    257c:	1b 82       	std	Y+3, r1	; 0x03
    257e:	ba c0       	rjmp	.+372    	; 0x26f4 <computeAnswer+0x3d2>
	while(ptr[i]!='\0')
	  {
		if(ptr[i] =='+' || ptr[i] =='-' )
    2580:	2b 81       	ldd	r18, Y+3	; 0x03
    2582:	3c 81       	ldd	r19, Y+4	; 0x04
    2584:	8f 85       	ldd	r24, Y+15	; 0x0f
    2586:	98 89       	ldd	r25, Y+16	; 0x10
    2588:	fc 01       	movw	r30, r24
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	80 81       	ld	r24, Z
    2590:	8b 32       	cpi	r24, 0x2B	; 43
    2592:	59 f0       	breq	.+22     	; 0x25aa <computeAnswer+0x288>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	8f 85       	ldd	r24, Y+15	; 0x0f
    259a:	98 89       	ldd	r25, Y+16	; 0x10
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	80 81       	ld	r24, Z
    25a4:	8d 32       	cpi	r24, 0x2D	; 45
    25a6:	09 f0       	breq	.+2      	; 0x25aa <computeAnswer+0x288>
    25a8:	a0 c0       	rjmp	.+320    	; 0x26ea <computeAnswer+0x3c8>
				{
			        operationCounts++;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
					j=i-1;
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	1a c0       	rjmp	.+52     	; 0x25f4 <computeAnswer+0x2d2>
					while(ptr[j]>='0' && ptr[j]<='9')
					{
						extractLeftOperand[leftIndex]=ptr[j];
    25c0:	49 85       	ldd	r20, Y+9	; 0x09
    25c2:	5a 85       	ldd	r21, Y+10	; 0x0a
    25c4:	29 81       	ldd	r18, Y+1	; 0x01
    25c6:	3a 81       	ldd	r19, Y+2	; 0x02
    25c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ca:	98 89       	ldd	r25, Y+16	; 0x10
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	20 81       	ld	r18, Z
    25d4:	ce 01       	movw	r24, r28
    25d6:	41 96       	adiw	r24, 0x11	; 17
    25d8:	fc 01       	movw	r30, r24
    25da:	e4 0f       	add	r30, r20
    25dc:	f5 1f       	adc	r31, r21
    25de:	20 83       	st	Z, r18
						leftIndex--;
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9a 87       	std	Y+10, r25	; 0x0a
    25e8:	89 87       	std	Y+9, r24	; 0x09
						j--;
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	  {
		if(ptr[i] =='+' || ptr[i] =='-' )
				{
			        operationCounts++;
					j=i-1;
					while(ptr[j]>='0' && ptr[j]<='9')
    25f4:	29 81       	ldd	r18, Y+1	; 0x01
    25f6:	3a 81       	ldd	r19, Y+2	; 0x02
    25f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fa:	98 89       	ldd	r25, Y+16	; 0x10
    25fc:	fc 01       	movw	r30, r24
    25fe:	e2 0f       	add	r30, r18
    2600:	f3 1f       	adc	r31, r19
    2602:	80 81       	ld	r24, Z
    2604:	80 33       	cpi	r24, 0x30	; 48
    2606:	50 f0       	brcs	.+20     	; 0x261c <computeAnswer+0x2fa>
    2608:	29 81       	ldd	r18, Y+1	; 0x01
    260a:	3a 81       	ldd	r19, Y+2	; 0x02
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	98 89       	ldd	r25, Y+16	; 0x10
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	8a 33       	cpi	r24, 0x3A	; 58
    261a:	90 f2       	brcs	.-92     	; 0x25c0 <computeAnswer+0x29e>
						extractLeftOperand[leftIndex]=ptr[j];
						leftIndex--;
						j--;
					}

					j=i+1;
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	1a c0       	rjmp	.+52     	; 0x265c <computeAnswer+0x33a>
					while(ptr[j]>='0' && ptr[j]<='9')
					{
						extractRightOperand[rightIndex]=ptr[j];
    2628:	4f 81       	ldd	r20, Y+7	; 0x07
    262a:	58 85       	ldd	r21, Y+8	; 0x08
    262c:	29 81       	ldd	r18, Y+1	; 0x01
    262e:	3a 81       	ldd	r19, Y+2	; 0x02
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	20 81       	ld	r18, Z
    263c:	ce 01       	movw	r24, r28
    263e:	82 96       	adiw	r24, 0x22	; 34
    2640:	fc 01       	movw	r30, r24
    2642:	e4 0f       	add	r30, r20
    2644:	f5 1f       	adc	r31, r21
    2646:	20 83       	st	Z, r18
						rightIndex++;
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	8f 83       	std	Y+7, r24	; 0x07
						j++;
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
						leftIndex--;
						j--;
					}

					j=i+1;
					while(ptr[j]>='0' && ptr[j]<='9')
    265c:	29 81       	ldd	r18, Y+1	; 0x01
    265e:	3a 81       	ldd	r19, Y+2	; 0x02
    2660:	8f 85       	ldd	r24, Y+15	; 0x0f
    2662:	98 89       	ldd	r25, Y+16	; 0x10
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	80 81       	ld	r24, Z
    266c:	80 33       	cpi	r24, 0x30	; 48
    266e:	50 f0       	brcs	.+20     	; 0x2684 <computeAnswer+0x362>
    2670:	29 81       	ldd	r18, Y+1	; 0x01
    2672:	3a 81       	ldd	r19, Y+2	; 0x02
    2674:	8f 85       	ldd	r24, Y+15	; 0x0f
    2676:	98 89       	ldd	r25, Y+16	; 0x10
    2678:	fc 01       	movw	r30, r24
    267a:	e2 0f       	add	r30, r18
    267c:	f3 1f       	adc	r31, r19
    267e:	80 81       	ld	r24, Z
    2680:	8a 33       	cpi	r24, 0x3A	; 58
    2682:	90 f2       	brcs	.-92     	; 0x2628 <computeAnswer+0x306>
					{
						extractRightOperand[rightIndex]=ptr[j];
						rightIndex++;
						j++;
					}
					if (ptr[i] =='+')
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	3c 81       	ldd	r19, Y+4	; 0x04
    2688:	8f 85       	ldd	r24, Y+15	; 0x0f
    268a:	98 89       	ldd	r25, Y+16	; 0x10
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	80 81       	ld	r24, Z
    2694:	8b 32       	cpi	r24, 0x2B	; 43
    2696:	a1 f4       	brne	.+40     	; 0x26c0 <computeAnswer+0x39e>
					{
					answer= atoi((const char *)extractLeftOperand) + atoi((const char *)extractRightOperand);
    2698:	ce 01       	movw	r24, r28
    269a:	41 96       	adiw	r24, 0x11	; 17
    269c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    26a0:	8c 01       	movw	r16, r24
    26a2:	ce 01       	movw	r24, r28
    26a4:	82 96       	adiw	r24, 0x22	; 34
    26a6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    26aa:	80 0f       	add	r24, r16
    26ac:	91 1f       	adc	r25, r17
    26ae:	aa 27       	eor	r26, r26
    26b0:	97 fd       	sbrc	r25, 7
    26b2:	a0 95       	com	r26
    26b4:	ba 2f       	mov	r27, r26
    26b6:	8b 87       	std	Y+11, r24	; 0x0b
    26b8:	9c 87       	std	Y+12, r25	; 0x0c
    26ba:	ad 87       	std	Y+13, r26	; 0x0d
    26bc:	be 87       	std	Y+14, r27	; 0x0e
    26be:	15 c0       	rjmp	.+42     	; 0x26ea <computeAnswer+0x3c8>
					}
					else
					{
					answer= atoi((const char *)extractLeftOperand) - atoi((const char *)extractRightOperand);
    26c0:	ce 01       	movw	r24, r28
    26c2:	41 96       	adiw	r24, 0x11	; 17
    26c4:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    26c8:	8c 01       	movw	r16, r24
    26ca:	ce 01       	movw	r24, r28
    26cc:	82 96       	adiw	r24, 0x22	; 34
    26ce:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    26d2:	98 01       	movw	r18, r16
    26d4:	28 1b       	sub	r18, r24
    26d6:	39 0b       	sbc	r19, r25
    26d8:	c9 01       	movw	r24, r18
    26da:	aa 27       	eor	r26, r26
    26dc:	97 fd       	sbrc	r25, 7
    26de:	a0 95       	com	r26
    26e0:	ba 2f       	mov	r27, r26
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
					}

				}
				i++;
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	9c 83       	std	Y+4, r25	; 0x04
    26f2:	8b 83       	std	Y+3, r24	; 0x03
		}
		i++; /* incerement counter if no operation is found*/
	  }

	i=0;
	while(ptr[i]!='\0')
    26f4:	2b 81       	ldd	r18, Y+3	; 0x03
    26f6:	3c 81       	ldd	r19, Y+4	; 0x04
    26f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fa:	98 89       	ldd	r25, Y+16	; 0x10
    26fc:	fc 01       	movw	r30, r24
    26fe:	e2 0f       	add	r30, r18
    2700:	f3 1f       	adc	r31, r19
    2702:	80 81       	ld	r24, Z
    2704:	88 23       	and	r24, r24
    2706:	09 f0       	breq	.+2      	; 0x270a <computeAnswer+0x3e8>
    2708:	3b cf       	rjmp	.-394    	; 0x2580 <computeAnswer+0x25e>
					}

				}
				i++;
	  }
	if(operationCounts==0)
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	a9 f4       	brne	.+42     	; 0x273c <computeAnswer+0x41a>
	{
		answer=atoi((const char *)arr);
    2712:	8b a9       	ldd	r24, Y+51	; 0x33
    2714:	9c a9       	ldd	r25, Y+52	; 0x34
    2716:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <atoi>
    271a:	aa 27       	eor	r26, r26
    271c:	97 fd       	sbrc	r25, 7
    271e:	a0 95       	com	r26
    2720:	ba 2f       	mov	r27, r26
    2722:	8b 87       	std	Y+11, r24	; 0x0b
    2724:	9c 87       	std	Y+12, r25	; 0x0c
    2726:	ad 87       	std	Y+13, r26	; 0x0d
    2728:	be 87       	std	Y+14, r27	; 0x0e
		return answer;
    272a:	8b 85       	ldd	r24, Y+11	; 0x0b
    272c:	9c 85       	ldd	r25, Y+12	; 0x0c
    272e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2730:	be 85       	ldd	r27, Y+14	; 0x0e
    2732:	8d ab       	std	Y+53, r24	; 0x35
    2734:	9e ab       	std	Y+54, r25	; 0x36
    2736:	af ab       	std	Y+55, r26	; 0x37
    2738:	b8 af       	std	Y+56, r27	; 0x38
    273a:	08 c0       	rjmp	.+16     	; 0x274c <computeAnswer+0x42a>
	}
	else
	{
		return answer;
    273c:	8b 85       	ldd	r24, Y+11	; 0x0b
    273e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2740:	ad 85       	ldd	r26, Y+13	; 0x0d
    2742:	be 85       	ldd	r27, Y+14	; 0x0e
    2744:	8d ab       	std	Y+53, r24	; 0x35
    2746:	9e ab       	std	Y+54, r25	; 0x36
    2748:	af ab       	std	Y+55, r26	; 0x37
    274a:	b8 af       	std	Y+56, r27	; 0x38
    274c:	8d a9       	ldd	r24, Y+53	; 0x35
    274e:	9e a9       	ldd	r25, Y+54	; 0x36
    2750:	af a9       	ldd	r26, Y+55	; 0x37
    2752:	b8 ad       	ldd	r27, Y+56	; 0x38
	}

}
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	e8 96       	adiw	r28, 0x38	; 56
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	08 95       	ret

0000276e <test_displayKeypadOnLCD>:


void test_displayKeypadOnLCD(void)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	2f 97       	sbiw	r28, 0x0f	; 15
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
	uint8 keypad= KEYPAD_getPressedKey();
    2782:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KEYPAD_getPressedKey>
    2786:	8f 87       	std	Y+15, r24	; 0x0f
	displayKeypadOnLcd(keypad);
    2788:	8f 85       	ldd	r24, Y+15	; 0x0f
    278a:	0e 94 25 10 	call	0x204a	; 0x204a <displayKeypadOnLcd>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a6 e9       	ldi	r26, 0x96	; 150
    2794:	b3 e4       	ldi	r27, 0x43	; 67
    2796:	8b 87       	std	Y+11, r24	; 0x0b
    2798:	9c 87       	std	Y+12, r25	; 0x0c
    279a:	ad 87       	std	Y+13, r26	; 0x0d
    279c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a e7       	ldi	r20, 0x7A	; 122
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8f 83       	std	Y+7, r24	; 0x07
    27b8:	98 87       	std	Y+8, r25	; 0x08
    27ba:	a9 87       	std	Y+9, r26	; 0x09
    27bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <test_displayKeypadOnLCD+0x72>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	3f c0       	rjmp	.+126    	; 0x285e <test_displayKeypadOnLCD+0xf0>
	else if (__tmp > 65535)
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <test_displayKeypadOnLCD+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <test_displayKeypadOnLCD+0xd2>
    2822:	89 e1       	ldi	r24, 0x19	; 25
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <test_displayKeypadOnLCD+0xc0>
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <test_displayKeypadOnLCD+0xb4>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <test_displayKeypadOnLCD+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <test_displayKeypadOnLCD+0xfc>
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300); /* Press time */
}
    2872:	2f 96       	adiw	r28, 0x0f	; 15
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <test_FillOperationArray>:

void test_FillOperationArray(void)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	61 97       	sbiw	r28, 0x11	; 17
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
	static uint8 count=0;
	static uint8 array[16];
	uint8 keypad= KEYPAD_getPressedKey();
    2898:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KEYPAD_getPressedKey>
    289c:	89 8b       	std	Y+17, r24	; 0x11
	count++;
    289e:	80 91 c2 00 	lds	r24, 0x00C2
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	80 93 c2 00 	sts	0x00C2, r24
	fillOperationArray(keypad,array);
    28a8:	22 eb       	ldi	r18, 0xB2	; 178
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	89 89       	ldd	r24, Y+17	; 0x11
    28ae:	b9 01       	movw	r22, r18
    28b0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <fillOperationArray>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a6 e9       	ldi	r26, 0x96	; 150
    28ba:	b3 e4       	ldi	r27, 0x43	; 67
    28bc:	8b 87       	std	Y+11, r24	; 0x0b
    28be:	9c 87       	std	Y+12, r25	; 0x0c
    28c0:	ad 87       	std	Y+13, r26	; 0x0d
    28c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a e7       	ldi	r20, 0x7A	; 122
    28d2:	53 e4       	ldi	r21, 0x43	; 67
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8f 83       	std	Y+7, r24	; 0x07
    28de:	98 87       	std	Y+8, r25	; 0x08
    28e0:	a9 87       	std	Y+9, r26	; 0x09
    28e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <test_FillOperationArray+0x82>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <test_FillOperationArray+0x100>
	else if (__tmp > 65535)
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <test_FillOperationArray+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2920:	7c 85       	ldd	r23, Y+12	; 0x0c
    2922:	8d 85       	ldd	r24, Y+13	; 0x0d
    2924:	9e 85       	ldd	r25, Y+14	; 0x0e
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <test_FillOperationArray+0xe2>
    2948:	89 e1       	ldi	r24, 0x19	; 25
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <test_FillOperationArray+0xd0>
    2958:	9c 83       	std	Y+4, r25	; 0x04
    295a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <test_FillOperationArray+0xc4>
    296e:	14 c0       	rjmp	.+40     	; 0x2998 <test_FillOperationArray+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	6f 81       	ldd	r22, Y+7	; 0x07
    2972:	78 85       	ldd	r23, Y+8	; 0x08
    2974:	89 85       	ldd	r24, Y+9	; 0x09
    2976:	9a 85       	ldd	r25, Y+10	; 0x0a
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <test_FillOperationArray+0x10c>
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300); /* Press time */
	LCD_clearScreen();
    2998:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
	for(int i=0; i<count;i++)
    29a4:	18 8a       	std	Y+16, r1	; 0x10
    29a6:	1f 86       	std	Y+15, r1	; 0x0f
    29a8:	0d c0       	rjmp	.+26     	; 0x29c4 <test_FillOperationArray+0x140>
	{
		LCD_displayCharacter(array[i]);
    29aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ac:	98 89       	ldd	r25, Y+16	; 0x10
    29ae:	fc 01       	movw	r30, r24
    29b0:	ee 54       	subi	r30, 0x4E	; 78
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
	count++;
	fillOperationArray(keypad,array);
	_delay_ms(300); /* Press time */
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	for(int i=0; i<count;i++)
    29ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    29bc:	98 89       	ldd	r25, Y+16	; 0x10
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	98 8b       	std	Y+16, r25	; 0x10
    29c2:	8f 87       	std	Y+15, r24	; 0x0f
    29c4:	80 91 c2 00 	lds	r24, 0x00C2
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ce:	98 89       	ldd	r25, Y+16	; 0x10
    29d0:	82 17       	cp	r24, r18
    29d2:	93 07       	cpc	r25, r19
    29d4:	54 f3       	brlt	.-44     	; 0x29aa <test_FillOperationArray+0x126>
	{
		LCD_displayCharacter(array[i]);

	}

}
    29d6:	61 96       	adiw	r28, 0x11	; 17
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <test_OperationIsValid>:

void test_OperationIsValid(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	61 97       	sbiw	r28, 0x11	; 17
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
	static uint8 count=0;
		static uint8 array[16];
		uint8 keypad= KEYPAD_getPressedKey();
    29fc:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KEYPAD_getPressedKey>
    2a00:	89 8b       	std	Y+17, r24	; 0x11
		count++;
    2a02:	80 91 d3 00 	lds	r24, 0x00D3
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	80 93 d3 00 	sts	0x00D3, r24
		fillOperationArray(keypad,array);
    2a0c:	23 ec       	ldi	r18, 0xC3	; 195
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	89 89       	ldd	r24, Y+17	; 0x11
    2a12:	b9 01       	movw	r22, r18
    2a14:	0e 94 6e 10 	call	0x20dc	; 0x20dc <fillOperationArray>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a6 e9       	ldi	r26, 0x96	; 150
    2a1e:	b3 e4       	ldi	r27, 0x43	; 67
    2a20:	8b 87       	std	Y+11, r24	; 0x0b
    2a22:	9c 87       	std	Y+12, r25	; 0x0c
    2a24:	ad 87       	std	Y+13, r26	; 0x0d
    2a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a e7       	ldi	r20, 0x7A	; 122
    2a36:	53 e4       	ldi	r21, 0x43	; 67
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8f 83       	std	Y+7, r24	; 0x07
    2a42:	98 87       	std	Y+8, r25	; 0x08
    2a44:	a9 87       	std	Y+9, r26	; 0x09
    2a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <test_OperationIsValid+0x82>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <test_OperationIsValid+0x100>
	else if (__tmp > 65535)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <test_OperationIsValid+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <test_OperationIsValid+0xe2>
    2aac:	89 e1       	ldi	r24, 0x19	; 25
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <test_OperationIsValid+0xd0>
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <test_OperationIsValid+0xc4>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <test_OperationIsValid+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad6:	78 85       	ldd	r23, Y+8	; 0x08
    2ad8:	89 85       	ldd	r24, Y+9	; 0x09
    2ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <test_OperationIsValid+0x10c>
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300); /* Press time */
		LCD_clearScreen();
    2afc:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
		for(int i=0; i<count;i++)
    2b08:	18 8a       	std	Y+16, r1	; 0x10
    2b0a:	1f 86       	std	Y+15, r1	; 0x0f
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <test_OperationIsValid+0x140>
		{
			LCD_displayCharacter(array[i]);
    2b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b10:	98 89       	ldd	r25, Y+16	; 0x10
    2b12:	fc 01       	movw	r30, r24
    2b14:	ed 53       	subi	r30, 0x3D	; 61
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
		count++;
		fillOperationArray(keypad,array);
		_delay_ms(300); /* Press time */
		LCD_clearScreen();
		LCD_moveCursor(0,0);
		for(int i=0; i<count;i++)
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	98 89       	ldd	r25, Y+16	; 0x10
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	98 8b       	std	Y+16, r25	; 0x10
    2b26:	8f 87       	std	Y+15, r24	; 0x0f
    2b28:	80 91 d3 00 	lds	r24, 0x00D3
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b32:	98 89       	ldd	r25, Y+16	; 0x10
    2b34:	82 17       	cp	r24, r18
    2b36:	93 07       	cpc	r25, r19
    2b38:	54 f3       	brlt	.-44     	; 0x2b0e <test_OperationIsValid+0x126>
		{
			LCD_displayCharacter(array[i]);

		}
	if (operationIsValid(array)==SYNTAX_ERROR)
    2b3a:	83 ec       	ldi	r24, 0xC3	; 195
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <operationIsValid>
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	49 f4       	brne	.+18     	; 0x2b58 <test_OperationIsValid+0x170>
	{
		LCD_moveCursor(1,0);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
		LCD_displayString("SYNTAX ERROR");
    2b4e:	80 e6       	ldi	r24, 0x60	; 96
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
    2b56:	08 c0       	rjmp	.+16     	; 0x2b68 <test_OperationIsValid+0x180>
	}
	else
	{
		LCD_moveCursor(1,0);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
		LCD_displayString("VALID");
    2b60:	8d e6       	ldi	r24, 0x6D	; 109
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
	}

}
    2b68:	61 96       	adiw	r28, 0x11	; 17
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <test_ComputeAnswer>:

void test_ComputeAnswer(void)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	65 97       	sbiw	r28, 0x15	; 21
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
	static uint8 count=0;
	static uint8 array[16];
    uint32 result=0;
    2b8e:	1a 8a       	std	Y+18, r1	; 0x12
    2b90:	1b 8a       	std	Y+19, r1	; 0x13
    2b92:	1c 8a       	std	Y+20, r1	; 0x14
    2b94:	1d 8a       	std	Y+21, r1	; 0x15
	uint8 keypad= KEYPAD_getPressedKey();
    2b96:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KEYPAD_getPressedKey>
    2b9a:	89 8b       	std	Y+17, r24	; 0x11
		count++;
    2b9c:	80 91 e4 00 	lds	r24, 0x00E4
    2ba0:	8f 5f       	subi	r24, 0xFF	; 255
    2ba2:	80 93 e4 00 	sts	0x00E4, r24
		fillOperationArray(keypad,array);
    2ba6:	24 ed       	ldi	r18, 0xD4	; 212
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	89 89       	ldd	r24, Y+17	; 0x11
    2bac:	b9 01       	movw	r22, r18
    2bae:	0e 94 6e 10 	call	0x20dc	; 0x20dc <fillOperationArray>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a6 e9       	ldi	r26, 0x96	; 150
    2bb8:	b3 e4       	ldi	r27, 0x43	; 67
    2bba:	8b 87       	std	Y+11, r24	; 0x0b
    2bbc:	9c 87       	std	Y+12, r25	; 0x0c
    2bbe:	ad 87       	std	Y+13, r26	; 0x0d
    2bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	53 e4       	ldi	r21, 0x43	; 67
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8f 83       	std	Y+7, r24	; 0x07
    2bdc:	98 87       	std	Y+8, r25	; 0x08
    2bde:	a9 87       	std	Y+9, r26	; 0x09
    2be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <test_ComputeAnswer+0x8a>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <test_ComputeAnswer+0x108>
	else if (__tmp > 65535)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <test_ComputeAnswer+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <test_ComputeAnswer+0xea>
    2c46:	89 e1       	ldi	r24, 0x19	; 25
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <test_ComputeAnswer+0xd8>
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <test_ComputeAnswer+0xcc>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <test_ComputeAnswer+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <test_ComputeAnswer+0x114>
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300); /* Press time */
		LCD_clearScreen();
    2c96:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
		for(int i=0; i<count;i++)
    2ca2:	18 8a       	std	Y+16, r1	; 0x10
    2ca4:	1f 86       	std	Y+15, r1	; 0x0f
    2ca6:	0d c0       	rjmp	.+26     	; 0x2cc2 <test_ComputeAnswer+0x148>
		{
			LCD_displayCharacter(array[i]);
    2ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2caa:	98 89       	ldd	r25, Y+16	; 0x10
    2cac:	fc 01       	movw	r30, r24
    2cae:	ec 52       	subi	r30, 0x2C	; 44
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
		count++;
		fillOperationArray(keypad,array);
		_delay_ms(300); /* Press time */
		LCD_clearScreen();
		LCD_moveCursor(0,0);
		for(int i=0; i<count;i++)
    2cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cba:	98 89       	ldd	r25, Y+16	; 0x10
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	98 8b       	std	Y+16, r25	; 0x10
    2cc0:	8f 87       	std	Y+15, r24	; 0x0f
    2cc2:	80 91 e4 00 	lds	r24, 0x00E4
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ccc:	98 89       	ldd	r25, Y+16	; 0x10
    2cce:	82 17       	cp	r24, r18
    2cd0:	93 07       	cpc	r25, r19
    2cd2:	54 f3       	brlt	.-44     	; 0x2ca8 <test_ComputeAnswer+0x12e>
		{
			LCD_displayCharacter(array[i]);

		}
		LCD_moveCursor(1,9);
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	69 e0       	ldi	r22, 0x09	; 9
    2cd8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
	if(keypad=='=')
    2cdc:	89 89       	ldd	r24, Y+17	; 0x11
    2cde:	8d 33       	cpi	r24, 0x3D	; 61
    2ce0:	71 f4       	brne	.+28     	; 0x2cfe <test_ComputeAnswer+0x184>
	{
	result = computeAnswer(array);
    2ce2:	84 ed       	ldi	r24, 0xD4	; 212
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 91 11 	call	0x2322	; 0x2322 <computeAnswer>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8a 8b       	std	Y+18, r24	; 0x12
    2cf0:	9b 8b       	std	Y+19, r25	; 0x13
    2cf2:	ac 8b       	std	Y+20, r26	; 0x14
    2cf4:	bd 8b       	std	Y+21, r27	; 0x15
	 LCD_intgerToString(result);
    2cf6:	8a 89       	ldd	r24, Y+18	; 0x12
    2cf8:	9b 89       	ldd	r25, Y+19	; 0x13
    2cfa:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_intgerToString>
	}

}
    2cfe:	65 96       	adiw	r28, 0x15	; 21
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <main>:
#include <util/delay.h> /* For the delay functions */
#include "./HAL/LCD/lcd.h"


int main ()
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	64 97       	sbiw	r28, 0x14	; 20
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
	static uint8 operationArray[16]={'\0'};
	uint32 answer=0;
    2d24:	19 8a       	std	Y+17, r1	; 0x11
    2d26:	1a 8a       	std	Y+18, r1	; 0x12
    2d28:	1b 8a       	std	Y+19, r1	; 0x13
    2d2a:	1c 8a       	std	Y+20, r1	; 0x14
	uint8 keypadCharacter;
	uint8 resultIsShownFlag=0;
    2d2c:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_init();
    2d2e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <LCD_init>
	while(1)
	{
		keypadCharacter= KEYPAD_getPressedKey();
    2d32:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KEYPAD_getPressedKey>
    2d36:	88 8b       	std	Y+16, r24	; 0x10
		if( resultIsShownFlag==1 && keypadCharacter==127 )
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	69 f4       	brne	.+26     	; 0x2d58 <main+0x48>
    2d3e:	88 89       	ldd	r24, Y+16	; 0x10
    2d40:	8f 37       	cpi	r24, 0x7F	; 127
    2d42:	51 f4       	brne	.+20     	; 0x2d58 <main+0x48>
		{
			LCD_moveCursor(1,0);
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
			LCD_displayString("                                      ");
    2d4c:	83 e7       	ldi	r24, 0x73	; 115
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
			resultIsShownFlag=0;
    2d54:	1f 86       	std	Y+15, r1	; 0x0f
    2d56:	ed cf       	rjmp	.-38     	; 0x2d32 <main+0x22>
			continue;
		}

		displayKeypadOnLcd(keypadCharacter);
    2d58:	88 89       	ldd	r24, Y+16	; 0x10
    2d5a:	0e 94 25 10 	call	0x204a	; 0x204a <displayKeypadOnLcd>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	aa e7       	ldi	r26, 0x7A	; 122
    2d64:	b3 e4       	ldi	r27, 0x43	; 67
    2d66:	8b 87       	std	Y+11, r24	; 0x0b
    2d68:	9c 87       	std	Y+12, r25	; 0x0c
    2d6a:	ad 87       	std	Y+13, r26	; 0x0d
    2d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a e7       	ldi	r20, 0x7A	; 122
    2d7c:	53 e4       	ldi	r21, 0x43	; 67
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8f 83       	std	Y+7, r24	; 0x07
    2d88:	98 87       	std	Y+8, r25	; 0x08
    2d8a:	a9 87       	std	Y+9, r26	; 0x09
    2d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <main+0xa0>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <main+0x11e>
	else if (__tmp > 65535)
    2db0:	6f 81       	ldd	r22, Y+7	; 0x07
    2db2:	78 85       	ldd	r23, Y+8	; 0x08
    2db4:	89 85       	ldd	r24, Y+9	; 0x09
    2db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <main+0x100>
    2df2:	89 e1       	ldi	r24, 0x19	; 25
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <main+0xee>
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9e 83       	std	Y+6, r25	; 0x06
    2e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <main+0xe2>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <main+0x12a>
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250); /* Press time */
		fillOperationArray(keypadCharacter,operationArray);
    2e42:	25 ee       	ldi	r18, 0xE5	; 229
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	88 89       	ldd	r24, Y+16	; 0x10
    2e48:	b9 01       	movw	r22, r18
    2e4a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <fillOperationArray>

		if(keypadCharacter=='=' && operationArray[0]!='\0')
    2e4e:	88 89       	ldd	r24, Y+16	; 0x10
    2e50:	8d 33       	cpi	r24, 0x3D	; 61
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <main+0x146>
    2e54:	6e cf       	rjmp	.-292    	; 0x2d32 <main+0x22>
    2e56:	80 91 e5 00 	lds	r24, 0x00E5
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <main+0x150>
    2e5e:	69 cf       	rjmp	.-302    	; 0x2d32 <main+0x22>
		{
			resultIsShownFlag=1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	8f 87       	std	Y+15, r24	; 0x0f
			if (operationIsValid(operationArray)==SYNTAX_ERROR)
    2e64:	85 ee       	ldi	r24, 0xE5	; 229
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <operationIsValid>
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	49 f4       	brne	.+18     	; 0x2e82 <main+0x172>
			{
			LCD_moveCursor(1,0);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_moveCursor>
			LCD_displayString("SYNTAX ERROR");
    2e78:	8a e9       	ldi	r24, 0x9A	; 154
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_displayString>
    2e80:	58 cf       	rjmp	.-336    	; 0x2d32 <main+0x22>
			}

			else
			{
				answer=computeAnswer(operationArray);
    2e82:	85 ee       	ldi	r24, 0xE5	; 229
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 91 11 	call	0x2322	; 0x2322 <computeAnswer>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	89 8b       	std	Y+17, r24	; 0x11
    2e90:	9a 8b       	std	Y+18, r25	; 0x12
    2e92:	ab 8b       	std	Y+19, r26	; 0x13
    2e94:	bc 8b       	std	Y+20, r27	; 0x14
				printAnswer(answer);
    2e96:	89 89       	ldd	r24, Y+17	; 0x11
    2e98:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9a:	ab 89       	ldd	r26, Y+19	; 0x13
    2e9c:	bc 89       	ldd	r27, Y+20	; 0x14
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 cb 10 	call	0x2196	; 0x2196 <printAnswer>
    2ea6:	45 cf       	rjmp	.-374    	; 0x2d32 <main+0x22>

00002ea8 <__divmodhi4>:
    2ea8:	97 fb       	bst	r25, 7
    2eaa:	09 2e       	mov	r0, r25
    2eac:	07 26       	eor	r0, r23
    2eae:	0a d0       	rcall	.+20     	; 0x2ec4 <__divmodhi4_neg1>
    2eb0:	77 fd       	sbrc	r23, 7
    2eb2:	04 d0       	rcall	.+8      	; 0x2ebc <__divmodhi4_neg2>
    2eb4:	0c d0       	rcall	.+24     	; 0x2ece <__udivmodhi4>
    2eb6:	06 d0       	rcall	.+12     	; 0x2ec4 <__divmodhi4_neg1>
    2eb8:	00 20       	and	r0, r0
    2eba:	1a f4       	brpl	.+6      	; 0x2ec2 <__divmodhi4_exit>

00002ebc <__divmodhi4_neg2>:
    2ebc:	70 95       	com	r23
    2ebe:	61 95       	neg	r22
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ec2 <__divmodhi4_exit>:
    2ec2:	08 95       	ret

00002ec4 <__divmodhi4_neg1>:
    2ec4:	f6 f7       	brtc	.-4      	; 0x2ec2 <__divmodhi4_exit>
    2ec6:	90 95       	com	r25
    2ec8:	81 95       	neg	r24
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	08 95       	ret

00002ece <__udivmodhi4>:
    2ece:	aa 1b       	sub	r26, r26
    2ed0:	bb 1b       	sub	r27, r27
    2ed2:	51 e1       	ldi	r21, 0x11	; 17
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <__udivmodhi4_ep>

00002ed6 <__udivmodhi4_loop>:
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	a6 17       	cp	r26, r22
    2edc:	b7 07       	cpc	r27, r23
    2ede:	10 f0       	brcs	.+4      	; 0x2ee4 <__udivmodhi4_ep>
    2ee0:	a6 1b       	sub	r26, r22
    2ee2:	b7 0b       	sbc	r27, r23

00002ee4 <__udivmodhi4_ep>:
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	5a 95       	dec	r21
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <__udivmodhi4_loop>
    2eec:	80 95       	com	r24
    2eee:	90 95       	com	r25
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	08 95       	ret

00002ef6 <__prologue_saves__>:
    2ef6:	2f 92       	push	r2
    2ef8:	3f 92       	push	r3
    2efa:	4f 92       	push	r4
    2efc:	5f 92       	push	r5
    2efe:	6f 92       	push	r6
    2f00:	7f 92       	push	r7
    2f02:	8f 92       	push	r8
    2f04:	9f 92       	push	r9
    2f06:	af 92       	push	r10
    2f08:	bf 92       	push	r11
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	ca 1b       	sub	r28, r26
    2f20:	db 0b       	sbc	r29, r27
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	09 94       	ijmp

00002f2e <__epilogue_restores__>:
    2f2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f30:	39 88       	ldd	r3, Y+17	; 0x11
    2f32:	48 88       	ldd	r4, Y+16	; 0x10
    2f34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f40:	b9 84       	ldd	r11, Y+9	; 0x09
    2f42:	c8 84       	ldd	r12, Y+8	; 0x08
    2f44:	df 80       	ldd	r13, Y+7	; 0x07
    2f46:	ee 80       	ldd	r14, Y+6	; 0x06
    2f48:	fd 80       	ldd	r15, Y+5	; 0x05
    2f4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f50:	b9 81       	ldd	r27, Y+1	; 0x01
    2f52:	ce 0f       	add	r28, r30
    2f54:	d1 1d       	adc	r29, r1
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	ed 01       	movw	r28, r26
    2f62:	08 95       	ret

00002f64 <atoi>:
    2f64:	fc 01       	movw	r30, r24
    2f66:	88 27       	eor	r24, r24
    2f68:	99 27       	eor	r25, r25
    2f6a:	e8 94       	clt
    2f6c:	21 91       	ld	r18, Z+
    2f6e:	20 32       	cpi	r18, 0x20	; 32
    2f70:	e9 f3       	breq	.-6      	; 0x2f6c <atoi+0x8>
    2f72:	29 30       	cpi	r18, 0x09	; 9
    2f74:	10 f0       	brcs	.+4      	; 0x2f7a <atoi+0x16>
    2f76:	2e 30       	cpi	r18, 0x0E	; 14
    2f78:	c8 f3       	brcs	.-14     	; 0x2f6c <atoi+0x8>
    2f7a:	2b 32       	cpi	r18, 0x2B	; 43
    2f7c:	41 f0       	breq	.+16     	; 0x2f8e <atoi+0x2a>
    2f7e:	2d 32       	cpi	r18, 0x2D	; 45
    2f80:	39 f4       	brne	.+14     	; 0x2f90 <atoi+0x2c>
    2f82:	68 94       	set
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <atoi+0x2a>
    2f86:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulhi_const_10>
    2f8a:	82 0f       	add	r24, r18
    2f8c:	91 1d       	adc	r25, r1
    2f8e:	21 91       	ld	r18, Z+
    2f90:	20 53       	subi	r18, 0x30	; 48
    2f92:	2a 30       	cpi	r18, 0x0A	; 10
    2f94:	c0 f3       	brcs	.-16     	; 0x2f86 <atoi+0x22>
    2f96:	1e f4       	brtc	.+6      	; 0x2f9e <atoi+0x3a>
    2f98:	90 95       	com	r25
    2f9a:	81 95       	neg	r24
    2f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9e:	08 95       	ret

00002fa0 <itoa>:
    2fa0:	fb 01       	movw	r30, r22
    2fa2:	9f 01       	movw	r18, r30
    2fa4:	e8 94       	clt
    2fa6:	42 30       	cpi	r20, 0x02	; 2
    2fa8:	c4 f0       	brlt	.+48     	; 0x2fda <itoa+0x3a>
    2faa:	45 32       	cpi	r20, 0x25	; 37
    2fac:	b4 f4       	brge	.+44     	; 0x2fda <itoa+0x3a>
    2fae:	4a 30       	cpi	r20, 0x0A	; 10
    2fb0:	29 f4       	brne	.+10     	; 0x2fbc <itoa+0x1c>
    2fb2:	97 fb       	bst	r25, 7
    2fb4:	1e f4       	brtc	.+6      	; 0x2fbc <itoa+0x1c>
    2fb6:	90 95       	com	r25
    2fb8:	81 95       	neg	r24
    2fba:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbc:	64 2f       	mov	r22, r20
    2fbe:	77 27       	eor	r23, r23
    2fc0:	0e 94 67 17 	call	0x2ece	; 0x2ece <__udivmodhi4>
    2fc4:	80 5d       	subi	r24, 0xD0	; 208
    2fc6:	8a 33       	cpi	r24, 0x3A	; 58
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <itoa+0x2c>
    2fca:	89 5d       	subi	r24, 0xD9	; 217
    2fcc:	81 93       	st	Z+, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	a1 f7       	brne	.-24     	; 0x2fbc <itoa+0x1c>
    2fd4:	16 f4       	brtc	.+4      	; 0x2fda <itoa+0x3a>
    2fd6:	5d e2       	ldi	r21, 0x2D	; 45
    2fd8:	51 93       	st	Z+, r21
    2fda:	10 82       	st	Z, r1
    2fdc:	c9 01       	movw	r24, r18
    2fde:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <strrev>

00002fe2 <__mulhi_const_10>:
    2fe2:	7a e0       	ldi	r23, 0x0A	; 10
    2fe4:	97 9f       	mul	r25, r23
    2fe6:	90 2d       	mov	r25, r0
    2fe8:	87 9f       	mul	r24, r23
    2fea:	80 2d       	mov	r24, r0
    2fec:	91 0d       	add	r25, r1
    2fee:	11 24       	eor	r1, r1
    2ff0:	08 95       	ret

00002ff2 <strrev>:
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	67 2f       	mov	r22, r23
    2ff8:	71 91       	ld	r23, Z+
    2ffa:	77 23       	and	r23, r23
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <strrev+0x4>
    2ffe:	32 97       	sbiw	r30, 0x02	; 2
    3000:	04 c0       	rjmp	.+8      	; 0x300a <strrev+0x18>
    3002:	7c 91       	ld	r23, X
    3004:	6d 93       	st	X+, r22
    3006:	70 83       	st	Z, r23
    3008:	62 91       	ld	r22, -Z
    300a:	ae 17       	cp	r26, r30
    300c:	bf 07       	cpc	r27, r31
    300e:	c8 f3       	brcs	.-14     	; 0x3002 <strrev+0x10>
    3010:	08 95       	ret

00003012 <_exit>:
    3012:	f8 94       	cli

00003014 <__stop_program>:
    3014:	ff cf       	rjmp	.-2      	; 0x3014 <__stop_program>
